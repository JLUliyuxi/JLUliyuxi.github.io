<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LyC&#39;s Blog</title>
  
  <subtitle>莫道君行早 更有早行人</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jluliyuxi.github.io/"/>
  <updated>2020-08-30T04:05:14.598Z</updated>
  <id>https://jluliyuxi.github.io/</id>
  
  <author>
    <name>LyC</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数组运算示例之随机漫步</title>
    <link href="https://jluliyuxi.github.io/2020/08/30/%E6%95%B0%E7%BB%84%E8%BF%90%E7%AE%97%E7%A4%BA%E4%BE%8B%E4%B9%8B%E9%9A%8F%E6%9C%BA%E6%BC%AB%E6%AD%A5/"/>
    <id>https://jluliyuxi.github.io/2020/08/30/%E6%95%B0%E7%BB%84%E8%BF%90%E7%AE%97%E7%A4%BA%E4%BE%8B%E4%B9%8B%E9%9A%8F%E6%9C%BA%E6%BC%AB%E6%AD%A5/</id>
    <published>2020-08-30T03:46:57.392Z</published>
    <updated>2020-08-30T04:05:14.598Z</updated>
    
    <content type="html"><![CDATA[<h1 id="随机漫步的概念"><a href="#随机漫步的概念" class="headerlink" title="随机漫步的概念"></a>随机漫步的概念</h1><p><strong>随机游走（random walk）也称随机漫步，随机行走等是指基于过去的表现，无法预测将来的发展步骤和方向。核心概念是指任何无规则行走者所带的守恒量都各自对应着一个扩散运输定律 ，接近于布朗运动，是布朗运动理想的数学状态。</strong></p><p><strong>本例为一个简单的随机漫步，从0开始，步长为1和-1，且出现的概率相等</strong></p><h1 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h1><p><strong>通过一个内置的random模块以纯Python的方式实现1000步的随机漫步</strong></p><h2 id="实现随机漫步"><a href="#实现随机漫步" class="headerlink" title="实现随机漫步"></a>实现随机漫步</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">position &#x3D; 0 #初始位置为0</span><br><span class="line">walk &#x3D;[position]</span><br><span class="line">steps &#x3D; 1000 #步数为1000步</span><br><span class="line">for i in range(steps):</span><br><span class="line">    step &#x3D; 1 if random.randint(0, 1) else -1</span><br><span class="line">    position +&#x3D; step</span><br><span class="line">    walk.append(position)</span><br></pre></td></tr></table></figure><h2 id="根据前100个随机漫步值生成折线图"><a href="#根据前100个随机漫步值生成折线图" class="headerlink" title="根据前100个随机漫步值生成折线图"></a>根据前100个随机漫步值生成折线图</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(walk[:100])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/08/30/qo983VYAiQ16xEk.png" alt="随机漫步折线图"></p><h2 id="通过数组运算来实现随机漫步"><a href="#通过数组运算来实现随机漫步" class="headerlink" title="通过数组运算来实现随机漫步"></a>通过数组运算来实现随机漫步</h2><p><strong>从上述过程可以看出，这其实就是随机漫步中各步的累加和，可以用一个数组运算来实现。</strong>       </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nsteps &#x3D; 1000</span><br><span class="line">draws &#x3D; np.random.randint(0, 2 , size &#x3D; nsteps)</span><br><span class="line">steps &#x3D; np.where(draws &gt; 0, 1, -1)</span><br><span class="line">walk &#x3D; steps.cumsum()</span><br></pre></td></tr></table></figure><p><strong>用np.random模块一次性随机产生1000各“掷硬币”结果，将其分别设置为1或-1，然后计算累加和</strong>     </p><h2 id="通过数组运算求随机漫步的最大值和最小值"><a href="#通过数组运算求随机漫步的最大值和最小值" class="headerlink" title="通过数组运算求随机漫步的最大值和最小值"></a>通过数组运算求随机漫步的最大值和最小值</h2><p><strong>有了上述数据，我们可以直接求出模拟随机漫步的最大值和最小值</strong>       </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(walk.min())</span><br><span class="line">print(walk.max())</span><br></pre></td></tr></table></figure><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">position &#x3D; 0 #初始位置为0</span><br><span class="line">walk &#x3D;[position]</span><br><span class="line">steps &#x3D; 1000 #步数为1000步</span><br><span class="line">for i in range(steps):</span><br><span class="line">    step &#x3D; 1 if random.randint(0, 1) else -1</span><br><span class="line">    position +&#x3D; step</span><br><span class="line">    walk.append(position)</span><br><span class="line"></span><br><span class="line">plt.plot(walk[:100])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">nsteps &#x3D; 1000</span><br><span class="line">draws &#x3D; np.random.randint(0, 2 , size &#x3D; nsteps)</span><br><span class="line">steps &#x3D; np.where(draws &gt; 0, 1, -1)</span><br><span class="line">walk &#x3D; steps.cumsum()</span><br><span class="line"></span><br><span class="line">print(walk.min())</span><br><span class="line">print(walk.max())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;随机漫步的概念&quot;&gt;&lt;a href=&quot;#随机漫步的概念&quot; class=&quot;headerlink&quot; title=&quot;随机漫步的概念&quot;&gt;&lt;/a&gt;随机漫步的概念&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;随机游走（random walk）也称随机漫步，随机行走等是指基于过去的表现，无法预
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python数据分析与展示（第3周 数据分析之概要 单元8 Pandas数据特征分析）</title>
    <link href="https://jluliyuxi.github.io/2020/08/27/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%B1%95%E7%A4%BA%EF%BC%88%E7%AC%AC3%E5%91%A8%20%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E6%A6%82%E8%A6%81%20%E5%8D%95%E5%85%838%20Pandas%E6%95%B0%E6%8D%AE%E7%89%B9%E5%BE%81%E5%88%86%E6%9E%90%EF%BC%89/"/>
    <id>https://jluliyuxi.github.io/2020/08/27/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%B1%95%E7%A4%BA%EF%BC%88%E7%AC%AC3%E5%91%A8%20%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E6%A6%82%E8%A6%81%20%E5%8D%95%E5%85%838%20Pandas%E6%95%B0%E6%8D%AE%E7%89%B9%E5%BE%81%E5%88%86%E6%9E%90%EF%BC%89/</id>
    <published>2020-08-27T08:51:53.242Z</published>
    <updated>2020-08-27T09:37:17.684Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据的排序"><a href="#数据的排序" class="headerlink" title="数据的排序"></a>数据的排序</h1><p><img src="https://i.loli.net/2020/08/27/p9oC8FmufALDPc6.png" alt="对一组数据的理解">      </p><h2 id="Pandas库的数据排序"><a href="#Pandas库的数据排序" class="headerlink" title="Pandas库的数据排序"></a>Pandas库的数据排序</h2><p><strong><code>.sort_index()</code>方法在指定轴上根据索引进行排序，默认升序</strong></p><blockquote><p><strong><code>.sort_index(axis=0,ascending=True)</code></strong>        </p></blockquote><p><strong><code>.sort_values()</code>方法在指定轴上根据数值进行排序，默认升序</strong>        </p><blockquote><p><strong><code>Series.sort_values(axis=0,ascending=True)</code></strong><br><strong><code>DataFrame.sort_values(by,axis=0,ascending=True)</code></strong><br>by:axis轴上的某个索引或索引列表     </p></blockquote><p><strong>NaN统一放到排序末尾</strong>     </p><h1 id="数据的基本统计分析"><a href="#数据的基本统计分析" class="headerlink" title="数据的基本统计分析"></a>数据的基本统计分析</h1><p>与NumPy中的函数相似：</p><p><strong>基本统计分析函数：适用于Series和DataFrame类型</strong>     </p><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">.sum()</td><td align="center">计算数据的总和，按0轴计算，下同</td></tr><tr><td align="center">.count()</td><td align="center">非NaN值的数量</td></tr><tr><td align="center">.mean() .median()</td><td align="center">计算数据的算术平均值、算术中位数</td></tr><tr><td align="center">.var() .std()</td><td align="center">计算数据的方差、标准差</td></tr><tr><td align="center">.min() .max()</td><td align="center">计算数据的最小值、最大值</td></tr><tr><td align="center">.describe()</td><td align="center">针对0轴(各列)的统计汇总</td></tr></tbody></table><p><strong>基本统计分析函数：只适用于Series函数</strong>        </p><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">.argmin() .argmax()</td><td align="center">计算数据最大值、最小值所在位置的索引位置(自动索引)</td></tr><tr><td align="center">.idxmin() .idxmax()</td><td align="center">计算数据最大值、最小值所在位置的索引(自定义索引)</td></tr></tbody></table><h1 id="数据的累计统计分析"><a href="#数据的累计统计分析" class="headerlink" title="数据的累计统计分析"></a>数据的累计统计分析</h1><p><strong>累计统计分析函数：适用于Series和DataFrame类型</strong>      </p><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">.cumsum()</td><td align="center">依次给出前1、2、… n个数的和</td></tr><tr><td align="center">.cumprod()</td><td align="center">依次给出前1、2、… n个数的积</td></tr><tr><td align="center">.cummax()</td><td align="center">依次给出前1、2、… n个数的最大值</td></tr><tr><td align="center">.cummin()</td><td align="center">依次给出前1、2、… n个数的最小值</td></tr></tbody></table><p><strong>累计统计分析函数：适用于Series和DataFrame类型,滚动计算(窗口计算)</strong>    </p><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">.rolling(w).sum()</td><td align="center">依次计算相邻w个元素的和</td></tr><tr><td align="center">.rolling(w).mean()</td><td align="center">依次计算相邻w个元素的算术平均值</td></tr><tr><td align="center">.rolling(w).var()</td><td align="center">依次计算相邻w个元素的方差</td></tr><tr><td align="center">.rolling(w).std()</td><td align="center">依次计算相邻w个元素的标准差</td></tr><tr><td align="center">.rolling(w).min().max()</td><td align="center">依次计算相邻w个元素的最小值和最大值</td></tr></tbody></table><h1 id="数据的相关分析"><a href="#数据的相关分析" class="headerlink" title="数据的相关分析"></a>数据的相关分析</h1><p><strong>相关性：</strong></p><blockquote><p><strong>X增大，Y增大，两个变量正相关</strong>        </p></blockquote><blockquote><p><strong>X增大，Y减小，两个变量负相关</strong>        </p></blockquote><blockquote><p><strong>X增大，Y无视，两个变量不相关</strong></p></blockquote><h2 id="协方差Cov-X-Y-进行描述"><a href="#协方差Cov-X-Y-进行描述" class="headerlink" title="协方差Cov(X,Y)进行描述"></a>协方差Cov(X,Y)进行描述</h2><p><img src="https://i.loli.net/2020/08/27/MpIrwV9vO5oj6FS.png" alt="协方差">       </p><h2 id="Pearson相关系数描述"><a href="#Pearson相关系数描述" class="headerlink" title="Pearson相关系数描述"></a>Pearson相关系数描述</h2><p><img src="https://i.loli.net/2020/08/27/Ji82MUGmEKck37j.png" alt="Pearson相关系数">       </p><h2 id="相关分析函数"><a href="#相关分析函数" class="headerlink" title="相关分析函数"></a>相关分析函数</h2><p><strong>适用于Series和DataFrame类型</strong>       </p><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">.cov()</td><td align="center">计算协方差矩阵</td></tr><tr><td align="center">.corr()</td><td align="center">计算相关系数矩阵，Pearson、Spearman、Kendall等系数</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据的排序&quot;&gt;&lt;a href=&quot;#数据的排序&quot; class=&quot;headerlink&quot; title=&quot;数据的排序&quot;&gt;&lt;/a&gt;数据的排序&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/08/27/p9oC8FmufALDPc6.pn
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python数据分析与展示（第3周 数据分析之概要 单元7 Pandas库入门）</title>
    <link href="https://jluliyuxi.github.io/2020/07/26/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%B1%95%E7%A4%BA%EF%BC%88%E7%AC%AC3%E5%91%A8%20%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E6%A6%82%E8%A6%81%20%E5%8D%95%E5%85%837%20Pandas%E5%BA%93%E5%85%A5%E9%97%A8%EF%BC%89/"/>
    <id>https://jluliyuxi.github.io/2020/07/26/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%B1%95%E7%A4%BA%EF%BC%88%E7%AC%AC3%E5%91%A8%20%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E6%A6%82%E8%A6%81%20%E5%8D%95%E5%85%837%20Pandas%E5%BA%93%E5%85%A5%E9%97%A8%EF%BC%89/</id>
    <published>2020-07-25T23:50:28.384Z</published>
    <updated>2020-08-27T09:33:59.034Z</updated>
    
    <content type="html"><![CDATA[<h1 id="本周课程导学"><a href="#本周课程导学" class="headerlink" title="本周课程导学"></a>本周课程导学</h1><p><strong>Pandas库的两个基本数据类型</strong></p><blockquote><p>series 一维数据类型<br>DataFrame 二维到多维数据类型</p></blockquote><p>基于上述数据的各类操作：<strong>基本操作</strong>、<strong>运算操作</strong>、<strong>特征类操作</strong>、<strong>关联类操作</strong>       </p><p>利用Pandas库对数据进行摘要，提取数据的一些基本特征    </p><h1 id="Pandas库介绍"><a href="#Pandas库介绍" class="headerlink" title="Pandas库介绍"></a>Pandas库介绍</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="http://pandas.pydata.org" target="_blank" rel="noopener">Pandas库官方网站</a>     </p><p>Pandas是Python第三方库，提供高性能易用数据类型和分析工具      </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><p><strong>Pandas是基于NumPy的，常与Numpy和Matplotlib一起使用</strong>      </p><h2 id="Pandas库小测"><a href="#Pandas库小测" class="headerlink" title="Pandas库小测"></a>Pandas库小测</h2><p><strong>Pandas库小测</strong>       </p><p><img src="https://i.loli.net/2020/07/26/gnBvKcjoId8MqXm.png" alt="Pandas库小测"></p><p>左边的数字是索引，右边的数字是值        </p><p><strong>d.cumsum()计算前N项的累加和</strong></p><p><img src="https://i.loli.net/2020/07/26/wCyxSd36XlzrLG2.png" alt="计算前N项的累加和"> </p><h2 id="NumPy和Pandas的比较"><a href="#NumPy和Pandas的比较" class="headerlink" title="NumPy和Pandas的比较"></a>NumPy和Pandas的比较</h2><table><thead><tr><th align="center">NumPy</th><th align="center">Pandas</th></tr></thead><tbody><tr><td align="center">基础数据类型</td><td align="center">扩展数据类型</td></tr><tr><td align="center">关注数据的结构表达</td><td align="center">关注数据的应用表达</td></tr></tbody></table><h1 id="Pandas库的Series类型"><a href="#Pandas库的Series类型" class="headerlink" title="Pandas库的Series类型"></a>Pandas库的Series类型</h1><h2 id="Series类型"><a href="#Series类型" class="headerlink" title="Series类型"></a>Series类型</h2><p><strong>Series类型由一组数据及与之相关的数据索引组成</strong></p><p>index_0 →→ data_a<br>index_1 →→ data_b<br>index_2 →→ data_c<br>index_3 →→ data_d<br>索引 →→→→→→→→ 数据      </p><h3 id="自动索引"><a href="#自动索引" class="headerlink" title="自动索引"></a>自动索引</h3><p><img src="https://i.loli.net/2020/07/26/EizY7WhmMJZlfTK.png" alt="自动索引"></p><h3 id="自定义索引"><a href="#自定义索引" class="headerlink" title="自定义索引"></a>自定义索引</h3><p><img src="https://i.loli.net/2020/07/26/swfI1uQ3HCchoRS.png" alt="自定义索引"></p><h3 id="Series类型的创建"><a href="#Series类型的创建" class="headerlink" title="Series类型的创建"></a>Series类型的创建</h3><p>Series类型可以由如下类型创建       </p><blockquote><p>Python列表<br>标量值<br>Python字典<br>ndarray<br>其他函数       </p></blockquote><h4 id="从标量值创建-必须有index"><a href="#从标量值创建-必须有index" class="headerlink" title="从标量值创建(必须有index=)"></a>从标量值创建(必须有index=)</h4><p><img src="https://i.loli.net/2020/07/26/UHQnKOLTgkVyW8Y.png" alt="从标量值创建"></p><p><strong>不能省略索引index=</strong>        </p><h4 id="从字典类型创建"><a href="#从字典类型创建" class="headerlink" title="从字典类型创建"></a>从字典类型创建</h4><p><img src="https://i.loli.net/2020/07/26/qhwNSKVXEoY3UQT.png" alt="从字典类型创建">       </p><p><strong>index从字典中可以进行选择操作</strong></p><p><img src="https://i.loli.net/2020/07/26/b8hkIoyzpT9xSuf.png" alt="index的选择操作"></p><h4 id="从ndarray类型创建"><a href="#从ndarray类型创建" class="headerlink" title="从ndarray类型创建"></a>从ndarray类型创建</h4><p><img src="https://i.loli.net/2020/07/26/O7JUj4LFXAgDRu6.png" alt="从ndarray类型创建"></p><p><img src="https://i.loli.net/2020/07/26/Aqsu2zCDUljR4IQ.png" alt="自定义索引"> </p><h2 id="Series类型的基本操作"><a href="#Series类型的基本操作" class="headerlink" title="Series类型的基本操作"></a>Series类型的基本操作</h2><p>Series类型包括<strong>index</strong>和<strong>values</strong>两部分，操作类似于ndarray和Python列表类型       </p><p><img src="https://i.loli.net/2020/07/29/f2eV7sOTdjaYJH9.png" alt="">  </p><p><strong>Series类型=numpy的array类型+新建的index类型</strong></p><h3 id="Series类型的基本操作类似ndarray类型"><a href="#Series类型的基本操作类似ndarray类型" class="headerlink" title="Series类型的基本操作类似ndarray类型"></a>Series类型的基本操作类似ndarray类型</h3><blockquote><p>索引方法相同，采用[]        </p><p>NumPy中运算和操作可采用Series类型     </p><p>可以通过自定义索引的列表进行切片       </p><p>可以通过自动索引进行切片，若存在自定义索引，则一同被切片   </p></blockquote><h3 id="Series类型的基本操作类似Python字典类型"><a href="#Series类型的基本操作类似Python字典类型" class="headerlink" title="Series类型的基本操作类似Python字典类型"></a>Series类型的基本操作类似Python字典类型</h3><blockquote><p>通过自定义索引访问      </p><p>保留字in操作，返回True or False</p><p>使用.get()方法</p></blockquote><h3 id="Series类型对齐操作"><a href="#Series类型对齐操作" class="headerlink" title="Series类型对齐操作"></a>Series类型对齐操作</h3><p><strong>Series+Series</strong>       </p><p><img src="https://i.loli.net/2020/07/29/RibndlCIys5rBZe.png" alt="对齐操作">      </p><p>索引相同的可以相互计算     </p><p>索引不同的计算返回为空     </p><p><strong>Series在运算中会自动对齐不同索引的数据</strong>      </p><h3 id="Series类型的name属性"><a href="#Series类型的name属性" class="headerlink" title="Series类型的name属性"></a>Series类型的name属性</h3><p>Series对象和索引都可以有一个名字，存储在属性<code>.name</code>中           </p><p><img src="https://i.loli.net/2020/07/29/X3KANdxmnrCcYbS.png" alt="">      </p><h3 id="Series类型的修改"><a href="#Series类型的修改" class="headerlink" title="Series类型的修改"></a>Series类型的修改</h3><p>Series对象可以随时修改并即刻生效     </p><p><img src="https://i.loli.net/2020/07/29/fJtN2mCzyL75Xlj.png" alt="">      </p><h1 id="Pandas库的DataFrame类型"><a href="#Pandas库的DataFrame类型" class="headerlink" title="Pandas库的DataFrame类型"></a>Pandas库的DataFrame类型</h1><h2 id="DataFrame类型"><a href="#DataFrame类型" class="headerlink" title="DataFrame类型"></a>DataFrame类型</h2><p><strong>DataFrame类型由共用相同索引的一组列组成</strong>        </p><p><img src="https://i.loli.net/2020/07/29/bIi2WkxFczSMABv.png" alt="">      </p><p>DataFrame是一个表格型的数据类型，每列值类型可以不同      </p><p>DataFrame既有行索引(index)，又有列索引(column)     </p><p>DataFrame常用于表达二维数据，但可以表达多维数据        </p><p>DataFrame类型可以由如下类型来创建：      </p><blockquote><p>二维ndarray对象<br>由一维ndarray、列表、字典、元组或Series构成的字典<br>Series构成的字典<br>其他的DataFrme类型          </p></blockquote><p><strong>DataFrame是二维带“标签”的数组</strong><br><img src="https://i.loli.net/2020/08/26/UFR6r9cqm3jQXdH.png" alt=""><br><strong>DataFrame基本操作类似Series，依据行列索引</strong>        </p><h1 id="Pandas库的数据类型操作"><a href="#Pandas库的数据类型操作" class="headerlink" title="Pandas库的数据类型操作"></a>Pandas库的数据类型操作</h1><h2 id="重新索引"><a href="#重新索引" class="headerlink" title="重新索引"></a>重新索引</h2><p><strong>.reindex()能够改变或重排Series和DataFrame索引</strong><br><strong>.reindex(index=None,columns=None,…)的参数</strong></p><table><thead><tr><th align="center">参数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">index, columns</td><td align="center">新的行列自定义索引</td></tr><tr><td align="center">fill_value</td><td align="center">重新索引中，用于填充缺失位置的值</td></tr><tr><td align="center">method</td><td align="center">填充方法，fill当前值向前填充，bfill向后填充</td></tr><tr><td align="center">limit</td><td align="center">最大填充量</td></tr><tr><td align="center">copy</td><td align="center">默认True,生成新的对象，False时， 新旧相等不复制</td></tr></tbody></table><p><strong>Series和DataFrame的索引是Index类型</strong><br><strong>Index类型是不可修改类型</strong>      </p><p><strong>对索引类型的常用操作</strong>      </p><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">.append(idx)</td><td align="center">连接另一个Index对象， 产生新的Index对象</td></tr><tr><td align="center">.diff(idx)</td><td align="center">计算差集，产生新的Index对象</td></tr><tr><td align="center">.intersection(idx)</td><td align="center">计算交集</td></tr><tr><td align="center">.union(idx)</td><td align="center">计算并集</td></tr><tr><td align="center">.delete(loc)</td><td align="center">删除loc位置处的元素</td></tr><tr><td align="center">.insert(loc,e)</td><td align="center">在loc位置增加一个 元素e</td></tr></tbody></table><h2 id="删除-drop"><a href="#删除-drop" class="headerlink" title="删除:drop"></a>删除:drop</h2><p><strong>.drop()能够删除Series和DataFrame指定行或列索引</strong></p><h1 id="Pandas库的数据类型运算"><a href="#Pandas库的数据类型运算" class="headerlink" title="Pandas库的数据类型运算"></a>Pandas库的数据类型运算</h1><p>Series和DataFrame计算符合 <strong>算术运算法则</strong>     </p><p>算术运算根据行列索引，补齐后运算，运算默认产生浮点数      </p><p>补齐时缺项填充NaN(空值)      </p><p>二维和一维、一维和零维间为广播运算       </p><p>采用<code>+-*/</code>符号进行的二元运算将会产生新的对象       </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;本周课程导学&quot;&gt;&lt;a href=&quot;#本周课程导学&quot; class=&quot;headerlink&quot; title=&quot;本周课程导学&quot;&gt;&lt;/a&gt;本周课程导学&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Pandas库的两个基本数据类型&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python数据分析与展示（第2周 数据分析之展示 单元六 引力波的绘制）</title>
    <link href="https://jluliyuxi.github.io/2020/07/25/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%B1%95%E7%A4%BA%EF%BC%88%E7%AC%AC2%E5%91%A8%20%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E5%B1%95%E7%A4%BA%20%E5%8D%95%E5%85%83%E5%85%AD%20%E5%BC%95%E5%8A%9B%E6%B3%A2%E7%9A%84%E7%BB%98%E5%88%B6%EF%BC%89/"/>
    <id>https://jluliyuxi.github.io/2020/07/25/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%B1%95%E7%A4%BA%EF%BC%88%E7%AC%AC2%E5%91%A8%20%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E5%B1%95%E7%A4%BA%20%E5%8D%95%E5%85%83%E5%85%AD%20%E5%BC%95%E5%8A%9B%E6%B3%A2%E7%9A%84%E7%BB%98%E5%88%B6%EF%BC%89/</id>
    <published>2020-07-25T00:28:43.986Z</published>
    <updated>2020-07-25T00:37:01.046Z</updated>
    
    <content type="html"><![CDATA[<h1 id="“引力波的绘制”实例介绍"><a href="#“引力波的绘制”实例介绍" class="headerlink" title="“引力波的绘制”实例介绍"></a>“引力波的绘制”实例介绍</h1><p><strong>引力波是因为时空弯曲对外以辐射形式传播的能量</strong>              </p><p><strong>数据源：</strong>                </p><p><a href="http://python123.io/dv/grawave.html" target="_blank" rel="noopener">http://python123.io/dv/grawave.html</a>             </p><p><a href="http://python123.io/dv/H1_Strain.wav" target="_blank" rel="noopener">http://python123.io/dv/H1_Strain.wav</a>                </p><p><a href="http://python123.io/dv/L1_Strain.wav" target="_blank" rel="noopener">http://python123.io/dv/L1_Strain.wav</a>                </p><p><a href="http://python123.io/dv/wf_template.txt" target="_blank" rel="noopener">http://python123.io/dv/wf_template.txt</a>             </p><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> scipy.io <span class="keyword">import</span> wavfile</span><br><span class="line"> </span><br><span class="line">rate_h, hstrain= wavfile.read(<span class="string">r"H1_Strain.wav"</span>,<span class="string">"rb"</span>)</span><br><span class="line">rate_l, lstrain= wavfile.read(<span class="string">r"L1_Strain.wav"</span>,<span class="string">"rb"</span>)</span><br><span class="line"><span class="comment">#reftime, ref_H1 = np.genfromtxt('GW150914_4_NR_waveform_template.txt').transpose()</span></span><br><span class="line">reftime, ref_H1 = np.genfromtxt(<span class="string">'wf_template.txt'</span>).transpose() <span class="comment">#使用python123.io下载文件</span></span><br><span class="line"> </span><br><span class="line">htime_interval = <span class="number">1</span>/rate_h</span><br><span class="line">ltime_interval = <span class="number">1</span>/rate_l</span><br><span class="line">fig = plt.figure(figsize=(<span class="number">12</span>, <span class="number">6</span>))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 丢失信号起始点</span></span><br><span class="line">htime_len = hstrain.shape[<span class="number">0</span>]/rate_h</span><br><span class="line">htime = np.arange(-htime_len/<span class="number">2</span>, htime_len/<span class="number">2</span> , htime_interval)</span><br><span class="line">plth = fig.add_subplot(<span class="number">221</span>)</span><br><span class="line">plth.plot(htime, hstrain, <span class="string">'y'</span>)</span><br><span class="line">plth.set_xlabel(<span class="string">'Time (seconds)'</span>)</span><br><span class="line">plth.set_ylabel(<span class="string">'H1 Strain'</span>)</span><br><span class="line">plth.set_title(<span class="string">'H1 Strain'</span>)</span><br><span class="line"> </span><br><span class="line">ltime_len = lstrain.shape[<span class="number">0</span>]/rate_l</span><br><span class="line">ltime = np.arange(-ltime_len/<span class="number">2</span>, ltime_len/<span class="number">2</span> , ltime_interval)</span><br><span class="line">pltl = fig.add_subplot(<span class="number">222</span>)</span><br><span class="line">pltl.plot(ltime, lstrain, <span class="string">'g'</span>)</span><br><span class="line">pltl.set_xlabel(<span class="string">'Time (seconds)'</span>)</span><br><span class="line">pltl.set_ylabel(<span class="string">'L1 Strain'</span>)</span><br><span class="line">pltl.set_title(<span class="string">'L1 Strain'</span>)</span><br><span class="line"> </span><br><span class="line">pltref = fig.add_subplot(<span class="number">212</span>)</span><br><span class="line">pltref.plot(reftime, ref_H1)</span><br><span class="line">pltref.set_xlabel(<span class="string">'Time (seconds)'</span>)</span><br><span class="line">pltref.set_ylabel(<span class="string">'Template Strain'</span>)</span><br><span class="line">pltref.set_title(<span class="string">'Template'</span>)</span><br><span class="line">fig.tight_layout()</span><br><span class="line"> </span><br><span class="line">plt.savefig(<span class="string">"Gravitational_Waves_Original.png"</span>)</span><br><span class="line">plt.show()</span><br><span class="line">plt.close(fig)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;“引力波的绘制”实例介绍&quot;&gt;&lt;a href=&quot;#“引力波的绘制”实例介绍&quot; class=&quot;headerlink&quot; title=&quot;“引力波的绘制”实例介绍&quot;&gt;&lt;/a&gt;“引力波的绘制”实例介绍&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;引力波是因为时空弯曲对外以辐射形式传播的能量
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python-Spyder光标在覆盖字符和插入模式间切换</title>
    <link href="https://jluliyuxi.github.io/2020/07/24/Python-Spyder%E5%85%89%E6%A0%87%E5%9C%A8%E8%A6%86%E7%9B%96%E5%AD%97%E7%AC%A6%E5%92%8C%E6%8F%92%E5%85%A5%E6%A8%A1%E5%BC%8F%E9%97%B4%E5%88%87%E6%8D%A2/"/>
    <id>https://jluliyuxi.github.io/2020/07/24/Python-Spyder%E5%85%89%E6%A0%87%E5%9C%A8%E8%A6%86%E7%9B%96%E5%AD%97%E7%AC%A6%E5%92%8C%E6%8F%92%E5%85%A5%E6%A8%A1%E5%BC%8F%E9%97%B4%E5%88%87%E6%8D%A2/</id>
    <published>2020-07-23T23:56:40.948Z</published>
    <updated>2020-07-25T00:22:38.417Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>某天早上，在用spyder编写代码的时候        </p><p>光标突然改变了输入模式     </p><p>从插入模式变成了cmd的那种覆盖模式    </p><p><img src="https://i.loli.net/2020/07/24/ZbsiNkWLc4n93wB.png" alt="覆盖模式"></p><p>后来查了一下，发现了问题所在      </p><p><strong>可能是由于我误触了insert键所致</strong></p><h1 id="insert键功能"><a href="#insert键功能" class="headerlink" title="insert键功能"></a>insert键功能</h1><blockquote><p>鼠标点击可输入框后会出现闪动的光标. 一般情况下,Windows系统默认光标位置插入字符,而光标向后移动,即输入时对光标后字符无影响. 但是Insert是嵌入,即插入并覆盖,所以当按下Insert键后再输入,光标后的字符会被消去,即被当前输入字符替换掉,再次按下后则会还原到默认插入状态.</p></blockquote><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>在键盘最上面的一排的按键中，找到了<code>Ins F12</code>,应该就是所谓的<code>insert</code>键了    </p><p>按下去，光标确实切换了输入模式</p><p><img src="https://i.loli.net/2020/07/24/NvGkXAOyeHidPS4.png" alt="插入模式"></p><p>至此，问题得到了解决</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;某天早上，在用spyder编写代码的时候        &lt;/p&gt;
&lt;p&gt;光标突然改变了输入模式     &lt;/p&gt;
&lt;p&gt;从插入模式变成了cm
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python数据分析与展示（第2周 数据分析之展示 单元五 Matplotlib基础绘图函数示例）</title>
    <link href="https://jluliyuxi.github.io/2020/07/23/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%B1%95%E7%A4%BA%EF%BC%88%E7%AC%AC2%E5%91%A8%20%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E5%B1%95%E7%A4%BA%20%E5%8D%95%E5%85%83%E4%BA%94%20Matplotlib%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE%E5%87%BD%E6%95%B0%E7%A4%BA%E4%BE%8B%EF%BC%89/"/>
    <id>https://jluliyuxi.github.io/2020/07/23/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%B1%95%E7%A4%BA%EF%BC%88%E7%AC%AC2%E5%91%A8%20%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E5%B1%95%E7%A4%BA%20%E5%8D%95%E5%85%83%E4%BA%94%20Matplotlib%E5%9F%BA%E7%A1%80%E7%BB%98%E5%9B%BE%E5%87%BD%E6%95%B0%E7%A4%BA%E4%BE%8B%EF%BC%89/</id>
    <published>2020-07-23T04:49:41.843Z</published>
    <updated>2020-07-25T00:22:34.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pyplot基础图表函数概述"><a href="#pyplot基础图表函数概述" class="headerlink" title="pyplot基础图表函数概述"></a>pyplot基础图表函数概述</h1><p><strong>大致地介绍基础图标，具体使用时，到<a href="https://matplotlib.org/" target="_blank" rel="noopener">matplotlib官网</a>查看官方文档学习</strong></p><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">plt.plot(x,y,fmt,…)</td><td align="center">绘制一个坐标图</td></tr><tr><td align="center">plt.boxplot(data,notch,position)</td><td align="center">绘制一个箱形图</td></tr><tr><td align="center">plt.bar(left,height,width,bottom)</td><td align="center">绘制一个条形图</td></tr><tr><td align="center">plt.barh(width,bottom,left,height)</td><td align="center">绘制一个横向条形图</td></tr><tr><td align="center">plt.polar(theta, r)</td><td align="center">绘制极坐标图</td></tr><tr><td align="center">plt.pie(data, explode)</td><td align="center">绘制饼图</td></tr><tr><td align="center">plt.psd(x,NFFT=256,pad_to,Fs)</td><td align="center">绘制功率谱密度图</td></tr><tr><td align="center">plt.specgram(x,NFFT=256,pad_to,F)</td><td align="center">绘制谱图</td></tr><tr><td align="center">plt.cohere(x,y,NFFT=256,Fs)</td><td align="center">绘制X-Y的相关性函数</td></tr><tr><td align="center">plt.scatter(x,y)</td><td align="center">绘制散点图，其中，x和y长度相同</td></tr><tr><td align="center">plt.step(x,y,where)</td><td align="center">绘制步阶图</td></tr><tr><td align="center">plt.hist(x,bins,normed)</td><td align="center">绘制直方图</td></tr><tr><td align="center">plt.contour(X,Y,Z,N)</td><td align="center">绘制等值图</td></tr><tr><td align="center">plt.vlines()</td><td align="center">绘制垂直图</td></tr><tr><td align="center">plt.stem(x,y,linefmt,markerfmt)</td><td align="center">绘制柴火图</td></tr><tr><td align="center">plt.plot_date()</td><td align="center">绘制数据日期</td></tr></tbody></table><h1 id="pyplot饼图的绘制"><a href="#pyplot饼图的绘制" class="headerlink" title="pyplot饼图的绘制"></a>pyplot饼图的绘制</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">labels = <span class="string">'Frogs'</span>, <span class="string">'Hogs'</span>, <span class="string">'Dogs'</span>, <span class="string">'Logs'</span></span><br><span class="line">sizes = [<span class="number">15</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">10</span>]</span><br><span class="line">explode = (<span class="number">0</span>, <span class="number">0.1</span>, <span class="number">0</span>, <span class="number">0</span>) <span class="comment">#'Hogs'需要突出</span></span><br><span class="line"></span><br><span class="line">plt.pie(sizes, explode=explode, labels=labels, autopct=<span class="string">'%1.1f%%'</span>, shadow=<span class="literal">False</span>, startangle=<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><strong>展示效果：</strong></p><p><img src="https://i.loli.net/2020/07/23/H3OE71FhYSsfeKl.png" alt="饼图">    </p><p><strong>正圆形的饼图</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">labels = <span class="string">'Frogs'</span>, <span class="string">'Hogs'</span>, <span class="string">'Dogs'</span>, <span class="string">'Logs'</span></span><br><span class="line">sizes = [<span class="number">15</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">10</span>]</span><br><span class="line">explode = (<span class="number">0</span>, <span class="number">0.1</span>, <span class="number">0</span>, <span class="number">0</span>) <span class="comment">#'Hogs'需要突出</span></span><br><span class="line"></span><br><span class="line">plt.pie(sizes, explode=explode, labels=labels, autopct=<span class="string">'%1.1f%%'</span>, shadow=<span class="literal">False</span>, startangle=<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line">plt.axis(<span class="string">'equal'</span>) <span class="comment">#要求绘制正圆形的饼图</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="pyplot直方图的绘制"><a href="#pyplot直方图的绘制" class="headerlink" title="pyplot直方图的绘制"></a>pyplot直方图的绘制</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">mu, sigma = <span class="number">100</span>, <span class="number">20</span> <span class="comment">#均值和标准差</span></span><br><span class="line">a = np.random.normal(mu, sigma, size=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">plt.hist(a, <span class="number">20</span>, normed=<span class="number">1</span>, histtype=<span class="string">'stepfilled'</span>, facecolor=<span class="string">'b'</span>, alpha=<span class="number">0.75</span>) <span class="comment">#第二个参数bin:直方图的个数</span></span><br><span class="line">plt.title(<span class="string">'Histogram'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><strong>展示效果：</strong></p><p><img src="https://i.loli.net/2020/07/24/GoqsJuWKBcR8Sky.png" alt="直方图"></p><h1 id="pyplot极坐标图的绘制"><a href="#pyplot极坐标图的绘制" class="headerlink" title="pyplot极坐标图的绘制"></a>pyplot极坐标图的绘制</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">N = <span class="number">20</span> <span class="comment">#数据的个数</span></span><br><span class="line">theta = np.linspace(<span class="number">0.0</span>, <span class="number">2</span>*np.pi, N, endpoint=<span class="literal">False</span>) <span class="comment">#从[0,2Π]等分</span></span><br><span class="line">radii = <span class="number">10</span> * np.random.rand(N)</span><br><span class="line">width = np.pi / <span class="number">4</span>*np.random.rand(N)</span><br><span class="line"></span><br><span class="line">ax = plt.subplot(<span class="number">111</span>,projection=<span class="string">'polar'</span>) <span class="comment">#将绘图区域分成相应的网格，'polar'即极坐标图</span></span><br><span class="line">bars = ax.bar(theta,radii,width=width,bottom=<span class="number">0.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> r,bar <span class="keyword">in</span> zip(radii, bars):</span><br><span class="line">    bar.set_facecolor(plt.cm.viridis(r / <span class="number">10.</span>))</span><br><span class="line">    bar.set_alpha(<span class="number">0.5</span>)</span><br><span class="line">    </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><strong>展示效果：</strong></p><p><img src="https://i.loli.net/2020/07/24/mIhJFRNfzYTs4Bg.png" alt="极坐标图"></p><h1 id="pyplot散点图的绘制"><a href="#pyplot散点图的绘制" class="headerlink" title="pyplot散点图的绘制"></a>pyplot散点图的绘制</h1><p><strong>使用面向对象的方式绘制散点图</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">ax.plot(<span class="number">10</span>*np.random.randn(<span class="number">100</span>), <span class="string">'o'</span>)</span><br><span class="line">ax.set_title(<span class="string">'simple Scatter'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><strong>展示效果：</strong></p><p><img src="https://i.loli.net/2020/07/24/9fqwrSXNLCWmAFK.png" alt="散点图"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;pyplot基础图表函数概述&quot;&gt;&lt;a href=&quot;#pyplot基础图表函数概述&quot; class=&quot;headerlink&quot; title=&quot;pyplot基础图表函数概述&quot;&gt;&lt;/a&gt;pyplot基础图表函数概述&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;大致地介绍基础图标，具体使用
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python数据分析与展示（第2周 数据分析之展示 单元四 Matplotlib库入门）</title>
    <link href="https://jluliyuxi.github.io/2020/07/19/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%B1%95%E7%A4%BA%EF%BC%88%E7%AC%AC2%E5%91%A8%20%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E5%B1%95%E7%A4%BA%20%E5%8D%95%E5%85%83%E5%9B%9B%20Matplotlib%E5%BA%93%E5%85%A5%E9%97%A8%EF%BC%89/"/>
    <id>https://jluliyuxi.github.io/2020/07/19/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%B1%95%E7%A4%BA%EF%BC%88%E7%AC%AC2%E5%91%A8%20%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E5%B1%95%E7%A4%BA%20%E5%8D%95%E5%85%83%E5%9B%9B%20Matplotlib%E5%BA%93%E5%85%A5%E9%97%A8%EF%BC%89/</id>
    <published>2020-07-19T02:37:53.877Z</published>
    <updated>2020-07-25T00:22:32.813Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Matplotlib库的介绍"><a href="#Matplotlib库的介绍" class="headerlink" title="Matplotlib库的介绍"></a>Matplotlib库的介绍</h1><p><strong>Matplotlib是Python优秀的数据可视化第三方库</strong></p><p><code>matplotlib.pyplot</code>是绘制各类可视化图形的命令子库，相当于快捷方式。     </p><p>引用库<code>import matplotlib.pyplot as plt</code>        </p><h2 id="实例小测一：只有Y值参数"><a href="#实例小测一：只有Y值参数" class="headerlink" title="实例小测一：只有Y值参数"></a>实例小测一：只有Y值参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">plt.plot([3,1,4,5,2]) </span><br><span class="line">plt.ylabel(&quot;grade&quot;) #增加Y轴grade</span><br><span class="line">plt.savefig(&#39;test&#39;, dpi&#x3D;600) #保存图片，默认为PNG格式，dpi修改输出质量</span><br><span class="line">plt.show() #显示出来</span><br></pre></td></tr></table></figure><p><strong><code>plt.plot()</code>输入参数为一个列表，将会只当作Y轴的值，X值即为列表的索引</strong></p><p><strong>展示结果：</strong></p><p><img src="https://i.loli.net/2020/07/19/eXDQqLcmsvVONMP.png" alt=""></p><h2 id="实例小测二：同时含有X轴和Y轴参数"><a href="#实例小测二：同时含有X轴和Y轴参数" class="headerlink" title="实例小测二：同时含有X轴和Y轴参数"></a>实例小测二：同时含有X轴和Y轴参数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>])</span><br><span class="line">plt.ylabel(<span class="string">"grade"</span>) <span class="comment">#增加Y轴grade</span></span><br><span class="line">plt.axis([<span class="number">-1</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="number">6</span>])</span><br><span class="line">plt.show() <span class="comment">#显示出来</span></span><br></pre></td></tr></table></figure><p><strong><code>plt.plot(x,y)</code>当有两个以上的参数时，按照X轴和Y轴顺序绘制数据点</strong></p><p><strong><code>plt.axis([a,b,c,d]</code>的参数是四个变量的列表，横轴是[a,b],纵轴是[c,d]</strong></p><p><strong>展示结果：</strong></p><p><img src="https://i.loli.net/2020/07/19/3bRy8osM2Bhq5Ll.png" alt=""></p><h2 id="pyplot的绘图区域"><a href="#pyplot的绘图区域" class="headerlink" title="pyplot的绘图区域"></a>pyplot的绘图区域</h2><p><code>plt.subplot(nrows,ncols,plot_number)</code>      </p><p>将一个绘图区域划分为以<code>nrows</code>为横轴数量，以<code>ncols</code>为纵轴数量的子区域,当前的图形位于<code>plot_number</code>区域  </p><p><strong><code>plt.subplot(3,2,4)</code></strong></p><p><img src="https://i.loli.net/2020/07/19/ZBhvMHLWPEXy7Sj.png" alt=""></p><p><strong>pyplot区域实例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(t)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.exp(-t) * np.cos(<span class="number">2</span>*np.pi*t) <span class="comment">#能量衰减曲线</span></span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">0.0</span>, <span class="number">5.0</span>, <span class="number">0.02</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">211</span>) <span class="comment">#将整个绘图区域分成两行一列，选择第一行</span></span><br><span class="line">plt.plot(a,f(a))</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">plt.plot(a,np.cos(<span class="number">2</span>*np.pi*t2), <span class="string">'r--'</span>)</span><br><span class="line">plt.show( )</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/07/19/FqeQlOs2N7nDC4A.png" alt=""></p><h1 id="pyplot的plot-函数"><a href="#pyplot的plot-函数" class="headerlink" title="pyplot的plot()函数"></a>pyplot的plot()函数</h1><p><code>plt.plot(x,y,format_string,**kwargs)</code>      </p><blockquote><p>x:X轴数据，列表或数组，可选<br>y:Y轴数据，列表或数组<br>format_string:控制曲线的格式字符串，可选<br>**kwargs:第二组或更多的(x,y,format_string)   </p></blockquote><p><strong>当绘制多条曲线时，x不能省略</strong>      </p><h2 id="绘制四条曲线"><a href="#绘制四条曲线" class="headerlink" title="绘制四条曲线"></a>绘制四条曲线</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">10</span>)</span><br><span class="line">plt.plot(a, a*<span class="number">1.5</span>, a, a*<span class="number">2.5</span>, a, a*<span class="number">3.5</span>, a, a*<span class="number">4.5</span>) <span class="comment">#每两个数为一条曲线</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><strong>展示结果：</strong></p><p><img src="https://i.loli.net/2020/07/20/yThLfDe2Y1OAakn.png" alt=""></p><h2 id="改变四条曲线的风格"><a href="#改变四条曲线的风格" class="headerlink" title="改变四条曲线的风格"></a>改变四条曲线的风格</h2><p><strong>format_string</strong>:控制曲线的格式字符串，可选     </p><p>由<strong>颜色字符</strong>，<strong>风格字符</strong>和<strong>标记字符</strong>组成</p><table><thead><tr><th align="center">颜色字符</th><th align="center">说明</th><th align="center">颜色字符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">‘b’</td><td align="center">蓝色</td><td align="center">‘r’</td><td align="center">红色</td></tr><tr><td align="center">‘m’</td><td align="center">洋红色magenta</td><td align="center">‘w’</td><td align="center">白色</td></tr><tr><td align="center">‘g’</td><td align="center">绿色</td><td align="center">‘k’</td><td align="center">黑色</td></tr><tr><td align="center">‘y’</td><td align="center">黄色</td><td align="center">‘c’</td><td align="center">青绿色cyan</td></tr><tr><td align="center">‘#008000’</td><td align="center">RGB某颜色</td><td align="center">‘0.8’</td><td align="center">灰度值字符串</td></tr></tbody></table><table><thead><tr><th align="center">风格字符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">‘-‘</td><td align="center">实线</td></tr><tr><td align="center">‘–’</td><td align="center">破折线</td></tr><tr><td align="center">‘-.’</td><td align="center">点划线</td></tr><tr><td align="center">‘:’</td><td align="center">虚线</td></tr><tr><td align="center">‘’’’</td><td align="center">无线条</td></tr></tbody></table><table><thead><tr><th align="center">标记字符</th><th align="center">说明</th><th align="center">标记字符</th><th align="center">说明</th><th align="center">标记字符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">‘.’</td><td align="center">点标记</td><td align="center">‘1’</td><td align="center">下花三角标记</td><td align="center">‘h’</td><td align="center">竖六边形标记</td></tr><tr><td align="center">‘,’</td><td align="center">像素标记(极小点)</td><td align="center">‘2’</td><td align="center">上花三角标记</td><td align="center">‘H’</td><td align="center">横六边形标记</td></tr><tr><td align="center">‘o’</td><td align="center">实心圈标记</td><td align="center">‘3’</td><td align="center">左花三角标记</td><td align="center">‘+’</td><td align="center">十字标记</td></tr><tr><td align="center">‘v’</td><td align="center">倒三角标记</td><td align="center">‘4’</td><td align="center">右花三角标记</td><td align="center">‘x’</td><td align="center">x标记</td></tr><tr><td align="center">‘^’</td><td align="center">上三角标记</td><td align="center">‘s’</td><td align="center">实心方形标记</td><td align="center">‘D’</td><td align="center">菱形标记</td></tr><tr><td align="center">‘&gt;’</td><td align="center">右三角标记</td><td align="center">‘p’</td><td align="center">实心五角标记</td><td align="center">‘d’</td><td align="center">瘦菱形标记</td></tr><tr><td align="center">‘&lt;’</td><td align="center">左三角标记</td><td align="center">‘*’</td><td align="center">星形标记</td><td align="center">`</td><td align="center">`</td></tr></tbody></table><h1 id="pyplot的中文显示"><a href="#pyplot的中文显示" class="headerlink" title="pyplot的中文显示"></a>pyplot的中文显示</h1><p>pyplot本身不支持中文，如果要在坐标系中出现中文，需要代码辅助       </p><h2 id="方法一：rcParams修改字体"><a href="#方法一：rcParams修改字体" class="headerlink" title="方法一：rcParams修改字体"></a>方法一：rcParams修改字体</h2><p><strong>此方法会改变坐标系的全局字体，不推荐使用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"></span><br><span class="line">matplotlib.rcParams[<span class="string">'font.family'</span>]  = <span class="string">'SimHei'</span> <span class="comment">#'SimHei'是黑体</span></span><br><span class="line">plt.plot([<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>])</span><br><span class="line">plt.ylabel(<span class="string">"纵轴（值）"</span>)</span><br><span class="line">plt.savefig(<span class="string">'test'</span>, dpi=<span class="number">600</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><strong>展示结果：</strong></p><p><img src="https://i.loli.net/2020/07/20/oXnVCMaLxrdO3qN.png" alt=""></p><p><strong>rcParams的属性</strong></p><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">‘font.family’</td><td align="center">用于显示字体的名字</td></tr><tr><td align="center">‘font.style’</td><td align="center">字体风格，正常’normal’或斜体’italie’</td></tr><tr><td align="center">‘font.size’</td><td align="center">字体大小，整数字号或者’large’、’x-small’</td></tr></tbody></table><p><strong>rcParams[‘font.family’]</strong></p><table><thead><tr><th align="center">中文字体</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">‘SimHei’</td><td align="center">中文黑体</td></tr><tr><td align="center">‘Kaiti’</td><td align="center">中文楷体</td></tr><tr><td align="center">‘LiSu’</td><td align="center">中文隶书</td></tr><tr><td align="center">‘FangSong’</td><td align="center">中文仿宋</td></tr><tr><td align="center">‘YouYuan’</td><td align="center">中文幼圆</td></tr><tr><td align="center">‘STSong’</td><td align="center">华文宋体</td></tr></tbody></table><h2 id="方法二：fontproperties"><a href="#方法二：fontproperties" class="headerlink" title="方法二：fontproperties"></a>方法二：fontproperties</h2><p><strong>在有中文输出的地方，增加一个属性：fontproperties</strong></p><p><strong>这种方法可以在特定输入中文的地方确定中文的字体和字号，而不改变全局字体，推荐使用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">0.0</span> , <span class="number">5.0</span> , <span class="number">0.02</span>)</span><br><span class="line">plt.xlabel(<span class="string">'横轴：时间'</span>,fontproperties=<span class="string">'SimHei'</span>,fontsize=<span class="number">20</span>)</span><br><span class="line">plt.ylabel(<span class="string">'纵轴：振幅'</span>,fontproperties=<span class="string">'SimHei'</span>,fontsize=<span class="number">20</span>)</span><br><span class="line">plt.plot(a, np.cos(<span class="number">2</span>*np.pi*a),<span class="string">'r--'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><strong>展示结果：</strong></p><p><img src="https://i.loli.net/2020/07/20/lO9bjXZgpLw28qn.png" alt=""></p><h1 id="pyplot的文本显示"><a href="#pyplot的文本显示" class="headerlink" title="pyplot的文本显示"></a>pyplot的文本显示</h1><p><strong>pyplot的文本显示函数</strong></p><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">plt.xlabel()</td><td align="center">对X轴增加文本标签</td></tr><tr><td align="center">plt.ylabel()</td><td align="center">对Y轴增加文本标签</td></tr><tr><td align="center">plt.title()</td><td align="center">对图形整体增加文本标签</td></tr><tr><td align="center">plt.text()</td><td align="center">在任意位置增加文本</td></tr><tr><td align="center">plt.annotate()</td><td align="center">在图形中增加带箭头的注解</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">0.0</span>,<span class="number">5.0</span>,<span class="number">0.02</span>)</span><br><span class="line">plt.plot(a, np.cos(<span class="number">2</span>*np.pi*a),<span class="string">'r--'</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">'横轴：时间'</span>, fontproperties=<span class="string">'SimHei'</span>,fontsize=<span class="number">15</span>,color=<span class="string">'green'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'纵轴：振幅'</span>, fontproperties=<span class="string">'SimHei'</span>,fontsize=<span class="number">15</span>)</span><br><span class="line">plt.title(<span class="string">r'正弦波实例 $y=cos(2\pi x)$'</span>, fontproperties=<span class="string">'SimHei'</span>,fontsize=<span class="number">25</span>) <span class="comment">#Latex语法</span></span><br><span class="line">plt.text(<span class="number">2</span>,<span class="number">1</span>, <span class="string">r'$\mu=100$'</span>, fontsize=<span class="number">15</span>) </span><br><span class="line"></span><br><span class="line">plt.axis([<span class="number">-1</span>,<span class="number">6</span>,<span class="number">-2</span>,<span class="number">2</span>])</span><br><span class="line">plt.grid(<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><strong>展示结果：</strong></p><p><img src="https://i.loli.net/2020/07/20/zdJhPkERDiqLHvY.png" alt=""></p><p><strong>plt.annotate(s, xy=arrow_crd, xytext=text_crd, arrowprops=dict)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">0.0</span>,<span class="number">5.0</span>,<span class="number">0.02</span>)</span><br><span class="line">plt.plot(a, np.cos(<span class="number">2</span>*np.pi*a),<span class="string">'r--'</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">'横轴：时间'</span>, fontproperties=<span class="string">'SimHei'</span>,fontsize=<span class="number">15</span>,color=<span class="string">'green'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'纵轴：振幅'</span>, fontproperties=<span class="string">'SimHei'</span>,fontsize=<span class="number">15</span>)</span><br><span class="line">plt.title(<span class="string">r'正弦波实例 $y=cos(2\pi x)$'</span>, fontproperties=<span class="string">'SimHei'</span>,fontsize=<span class="number">25</span>) <span class="comment">#Latex语法</span></span><br><span class="line">plt.annotate(<span class="string">r'$\mu=100$'</span>, xy=(<span class="number">2</span>,<span class="number">1</span>), xytext=(<span class="number">3</span>,<span class="number">1.5</span>), arrowprops=dict(facecolor=<span class="string">'black'</span>,shrink=<span class="number">0.1</span>,width=<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">plt.axis([<span class="number">-1</span>,<span class="number">6</span>,<span class="number">-2</span>,<span class="number">2</span>])</span><br><span class="line">plt.grid(<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><strong>展示结果：</strong></p><p><img src="https://i.loli.net/2020/07/20/ZlyubpmqR1AEQXj.png" alt=""></p><h1 id="pyplot的子绘图区域"><a href="#pyplot的子绘图区域" class="headerlink" title="pyplot的子绘图区域"></a>pyplot的子绘图区域</h1><h2 id="subplot2gird-方法"><a href="#subplot2gird-方法" class="headerlink" title="subplot2gird()方法"></a>subplot2gird()方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.subplot2grid(GridSpec,CurSpec,colspan=<span class="number">1</span>,rowspan=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><strong>设定网格，选中网格，确定选中行列区域数量，编号从0开始</strong>     </p><blockquote><p>GridSpec是一个元组(a,b)，表示a*b个方格<br>CurSpec是一个元组(c,d)，表示位于第(c,d)个方格<br>colspan表示横向合并方格<br>rowspan表示纵向合并方格        </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.gridspec <span class="keyword">as</span> gridspec</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">ax1 = plt.subplot2grid((<span class="number">3</span>,<span class="number">3</span>), (<span class="number">0</span>,<span class="number">0</span>), colspan=<span class="number">3</span>)</span><br><span class="line">ax2 = plt.subplot2grid((<span class="number">3</span>,<span class="number">3</span>), (<span class="number">1</span>,<span class="number">0</span>), colspan=<span class="number">2</span>)</span><br><span class="line">ax3 = plt.subplot2grid((<span class="number">3</span>,<span class="number">3</span>), (<span class="number">1</span>,<span class="number">2</span>), rowspan=<span class="number">2</span>)</span><br><span class="line">ax4 = plt.subplot2grid((<span class="number">3</span>,<span class="number">3</span>), (<span class="number">2</span>,<span class="number">0</span>))</span><br><span class="line">ax5 = plt.subplot2grid((<span class="number">3</span>,<span class="number">3</span>), (<span class="number">2</span>,<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p><strong>展示结果：</strong></p><p><img src="https://i.loli.net/2020/07/21/LRV1Kpo8zP9jBcm.png" alt=""></p><h2 id="GridSpec类"><a href="#GridSpec类" class="headerlink" title="GridSpec类"></a>GridSpec类</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.gridspec <span class="keyword">as</span> gridspec</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">gs = gridspec.GridSpec(<span class="number">3</span>,<span class="number">3</span>) <span class="comment">#生成3*3的格子</span></span><br><span class="line"></span><br><span class="line">ax1 = plt.subplot(gs[<span class="number">0</span>,:])  <span class="comment">#第0行 全部列</span></span><br><span class="line">ax2 = plt.subplot(gs[<span class="number">1</span>,:<span class="number">-1</span>])</span><br><span class="line">ax3 = plt.subplot(gs[<span class="number">1</span>:,<span class="number">-1</span>])</span><br><span class="line">ax4 = plt.subplot(gs[<span class="number">2</span>,<span class="number">0</span>])</span><br><span class="line">ax5 = plt.subplot(gs[<span class="number">2</span>,<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p><strong>展示结果：</strong></p><p><img src="https://i.loli.net/2020/07/21/LRV1Kpo8zP9jBcm.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Matplotlib库的介绍&quot;&gt;&lt;a href=&quot;#Matplotlib库的介绍&quot; class=&quot;headerlink&quot; title=&quot;Matplotlib库的介绍&quot;&gt;&lt;/a&gt;Matplotlib库的介绍&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Matplotlib是Pyt
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python数据分析与展示（第1周 数据分析之表示 单元三 实例一：图像的手绘效果）</title>
    <link href="https://jluliyuxi.github.io/2020/07/18/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%B1%95%E7%A4%BA%EF%BC%88%E7%AC%AC1%E5%91%A8%20%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E8%A1%A8%E7%A4%BA%20%E5%8D%95%E5%85%83%E4%B8%89%20%E5%AE%9E%E4%BE%8B%E4%B8%80%EF%BC%9A%E5%9B%BE%E5%83%8F%E7%9A%84%E6%89%8B%E7%BB%98%E6%95%88%E6%9E%9C%EF%BC%89/"/>
    <id>https://jluliyuxi.github.io/2020/07/18/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%B1%95%E7%A4%BA%EF%BC%88%E7%AC%AC1%E5%91%A8%20%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E8%A1%A8%E7%A4%BA%20%E5%8D%95%E5%85%83%E4%B8%89%20%E5%AE%9E%E4%BE%8B%E4%B8%80%EF%BC%9A%E5%9B%BE%E5%83%8F%E7%9A%84%E6%89%8B%E7%BB%98%E6%95%88%E6%9E%9C%EF%BC%89/</id>
    <published>2020-07-18T14:13:10.849Z</published>
    <updated>2020-07-25T00:22:35.953Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图像的数组表示"><a href="#图像的数组表示" class="headerlink" title="图像的数组表示"></a>图像的数组表示</h1><p><strong>图像一般采用RGB模式，取值范围均为0-255。</strong></p><p>Python的第三方库：PIL库    </p><p>在命令行下安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pillow`</span><br></pre></td></tr></table></figure><p>引用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image        </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np                                            </span><br><span class="line">im = np.array(Image.open(<span class="string">"C:/Users/91353/Desktop/Wallpaper/nr1jj0.png"</span>))        </span><br><span class="line">print(im.shape, im.dtype)</span><br></pre></td></tr></table></figure><p><strong>输出：</strong><code>(1080, 1920, 4) uint8</code></p><p><strong>图像是一个三维数组，维度分别是高度、宽度和像素RGB值</strong></p><h1 id="图像的变换"><a href="#图像的变换" class="headerlink" title="图像的变换"></a>图像的变换</h1><p><strong>- 读入图像</strong>     </p><p><strong>- 获得像素的RGB值</strong>    </p><p><strong>- 修改后保存为新文件</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np                                    </span><br><span class="line">a = np.array(Image.open(<span class="string">"C:/Users/91353/Desktop/Wallpaper/nr1jj0.png"</span>))</span><br><span class="line">print(a.shape, a.dtype)</span><br><span class="line">b = [<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>] -a</span><br><span class="line">im = Image.formarray(b.astype(<span class="string">'uint8'</span>))</span><br><span class="line">im.save(<span class="string">"C:/Users/91353/Desktop/Wallpaper/TestPhoto.png"</span>)</span><br></pre></td></tr></table></figure><h1 id="“图像的手绘效果”实例分析"><a href="#“图像的手绘效果”实例分析" class="headerlink" title="“图像的手绘效果”实例分析"></a>“图像的手绘效果”实例分析</h1><p><strong>特点：黑白灰色、边界线条较重、相同或相近色彩趋于白色</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">a = np.asarray(Image.open(<span class="string">'C:/Users/91353/Desktop/Wallpaper/nr1jj0.png'</span>).convert(<span class="string">'L'</span>)).astype(<span class="string">'float'</span>)</span><br><span class="line"> </span><br><span class="line">depth = <span class="number">10.</span>                      <span class="comment"># (0-100)</span></span><br><span class="line">grad = np.gradient(a)             <span class="comment">#取图像灰度的梯度值</span></span><br><span class="line">grad_x, grad_y = grad               <span class="comment">#分别取横纵图像梯度值</span></span><br><span class="line">grad_x = grad_x*depth/<span class="number">100.</span></span><br><span class="line">grad_y = grad_y*depth/<span class="number">100.</span></span><br><span class="line">A = np.sqrt(grad_x**<span class="number">2</span> + grad_y**<span class="number">2</span> + <span class="number">1.</span>)</span><br><span class="line">uni_x = grad_x/A</span><br><span class="line">uni_y = grad_y/A</span><br><span class="line">uni_z = <span class="number">1.</span>/A</span><br><span class="line"> </span><br><span class="line">vec_el = np.pi/<span class="number">2.2</span>                   <span class="comment"># 光源的俯视角度，弧度值</span></span><br><span class="line">vec_az = np.pi/<span class="number">4.</span>                    <span class="comment"># 光源的方位角度，弧度值</span></span><br><span class="line">dx = np.cos(vec_el)*np.cos(vec_az)   <span class="comment">#光源对x 轴的影响</span></span><br><span class="line">dy = np.cos(vec_el)*np.sin(vec_az)   <span class="comment">#光源对y 轴的影响</span></span><br><span class="line">dz = np.sin(vec_el)              <span class="comment">#光源对z 轴的影响</span></span><br><span class="line"> </span><br><span class="line">b = <span class="number">255</span>*(dx*uni_x + dy*uni_y + dz*uni_z)     <span class="comment">#光源归一化</span></span><br><span class="line">b = b.clip(<span class="number">0</span>,<span class="number">255</span>)</span><br><span class="line"> </span><br><span class="line">im = Image.fromarray(b.astype(<span class="string">'uint8'</span>))  <span class="comment">#重构图像</span></span><br><span class="line">im.save(<span class="string">'C:/Users/91353/Desktop/Wallpaper/Test.png'</span>)</span><br></pre></td></tr></table></figure><h2 id="原图"><a href="#原图" class="headerlink" title="原图"></a>原图</h2><p><img src="https://i.loli.net/2020/07/18/s8IN6QqbW74KpM1.png" alt="Original_Photo"></p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://i.loli.net/2020/07/18/QIpeGlDH3sObcWT.png" alt="Test_Photo"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;图像的数组表示&quot;&gt;&lt;a href=&quot;#图像的数组表示&quot; class=&quot;headerlink&quot; title=&quot;图像的数组表示&quot;&gt;&lt;/a&gt;图像的数组表示&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;图像一般采用RGB模式，取值范围均为0-255。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python数据分析与展示（第1周 数据分析之表示 单元二 NumPy数据存储与函数）</title>
    <link href="https://jluliyuxi.github.io/2020/07/12/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%B1%95%E7%A4%BA%EF%BC%88%E7%AC%AC1%E5%91%A8%20%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E8%A1%A8%E7%A4%BA%20%E5%8D%95%E5%85%83%E4%BA%8C%20NumPy%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B8%8E%E5%87%BD%E6%95%B0%EF%BC%89/"/>
    <id>https://jluliyuxi.github.io/2020/07/12/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%B1%95%E7%A4%BA%EF%BC%88%E7%AC%AC1%E5%91%A8%20%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E8%A1%A8%E7%A4%BA%20%E5%8D%95%E5%85%83%E4%BA%8C%20NumPy%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B8%8E%E5%87%BD%E6%95%B0%EF%BC%89/</id>
    <published>2020-07-12T02:33:45.242Z</published>
    <updated>2020-07-25T00:22:35.266Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据的CSV文件存取"><a href="#数据的CSV文件存取" class="headerlink" title="数据的CSV文件存取"></a>数据的CSV文件存取</h1><p><strong>CSV(Comma-Separated Value,逗号分隔值)</strong>        </p><h2 id="将数据写入CSV文件"><a href="#将数据写入CSV文件" class="headerlink" title="将数据写入CSV文件"></a>将数据写入CSV文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.savetxt(frame,array,fmt=<span class="string">'%.18e'</span>,delimiter=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><blockquote><p><strong>frame</strong>:文件、字符串或产生器，可以是.gz或.bz2的压缩文件<br><strong>array</strong>:存入文件的数组<br><strong>fmt</strong>:写入文件的格式，例如：%d %.2f %.18e<br><strong>delimiter</strong>:分割字符串，默认是任何空格     </p></blockquote><h2 id="将CSV文件数据读入numpy数组类型"><a href="#将CSV文件数据读入numpy数组类型" class="headerlink" title="将CSV文件数据读入numpy数组类型"></a>将CSV文件数据读入numpy数组类型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.loadtxt(frame,dtype=np.float,delimiter=<span class="literal">None</span>,unpack=<span class="literal">False</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>frame</strong>:文件、字符串或产生器，可以是.gz或.bz2的压缩文件<br><strong>dtype</strong>:数据类型，可选，默认是浮点数类型<br><strong>delimiter</strong>:分割字符串，默认是任何空格<br><strong>unpack</strong>:如果True，读入属性将分别写入不同变量        </p></blockquote><h1 id="多维数据的存取"><a href="#多维数据的存取" class="headerlink" title="多维数据的存取"></a>多维数据的存取</h1><h2 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h2><h3 id="a-tofile-frame-sep-39-39-format-39-s-39"><a href="#a-tofile-frame-sep-39-39-format-39-s-39" class="headerlink" title="a.tofile(frame,sep=&#39;&#39;,format=&#39;%s&#39;)"></a><code>a.tofile(frame,sep=&#39;&#39;,format=&#39;%s&#39;)</code></h3><blockquote><p><strong>frame</strong>:文件、字符串<br><strong>sep</strong>:数据分割字符串，如果是空串，写入文件为二进制<br><strong>format</strong>:写入数据的格式     </p></blockquote><h3 id="np-fromfile-frame-dtype-float-count-1-sep-39-39"><a href="#np-fromfile-frame-dtype-float-count-1-sep-39-39" class="headerlink" title="np.fromfile(frame,dtype=float,count=-1,sep=&#39;&#39;)"></a><code>np.fromfile(frame,dtype=float,count=-1,sep=&#39;&#39;)</code></h3><blockquote><p><strong>frame</strong>:文件、字符串<br><strong>dtype</strong>:读取的数据类型<br><strong>count</strong>:读入元素个数，-1表示读入整个文件<br><strong>sep</strong>:数据分割字符串，如果是空串，写入文件为二进制     </p></blockquote><p><strong><em>需要注意：</em></strong><br><strong><em>该方法需要读取时知道存入文件时数组的维度和元素类型</em></strong><br><strong><em>a.tofile()和np.fromfile()需要配合使用</em></strong><br><strong><em>可以通过元数据文件来存储额外信息</em></strong>      </p><h2 id="方法二：NumPy的便携文件存取"><a href="#方法二：NumPy的便携文件存取" class="headerlink" title="方法二：NumPy的便携文件存取"></a>方法二：NumPy的便携文件存取</h2><h3 id="np-save-fname-array-或-np-savez-fname-array"><a href="#np-save-fname-array-或-np-savez-fname-array" class="headerlink" title="np.save(fname,array) 或 np.savez(fname,array)"></a><code>np.save(fname,array)</code> 或 <code>np.savez(fname,array)</code></h3><blockquote><p><strong>frame</strong>:文件名，以.npy为扩展名，压缩扩展名为.npz<br><strong>array</strong>:数组变量     </p></blockquote><h3 id="np-load-fname"><a href="#np-load-fname" class="headerlink" title="np.load(fname)"></a><code>np.load(fname)</code></h3><blockquote><p><strong>frame</strong>:文件名，以.npy为扩展名，压缩扩展名为.npz         </p></blockquote><h1 id="NumPy的随机数函数"><a href="#NumPy的随机数函数" class="headerlink" title="NumPy的随机数函数"></a>NumPy的随机数函数</h1><p>NumPy的random子库      </p><p><strong>np.random的随机数函数(1)</strong></p><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">rand(d0,d1,..,dn)</td><td align="center">根据d0-dn创建随机数数组，浮点数，[0,1)，均匀分布</td></tr><tr><td align="center">randn(d0,d1,..,dn)</td><td align="center">根据d0-dn创建随机数数组，标准正态分布</td></tr><tr><td align="center">randint(low[,high,shape])</td><td align="center">根据shape创建随机整数或整数数组，范围是[low, high)</td></tr><tr><td align="center">seed(s)</td><td align="center">随机数种子，s是给定的种子值</td></tr></tbody></table><p><strong>np.random的随机数函数(2)</strong></p><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">shuffle(a)</td><td align="center">根据数组a的第1轴进行随排列，改变数组x</td></tr><tr><td align="center">permutation(a)</td><td align="center">根据数组a的第1轴产生一个新的乱序数组，不改变数组x</td></tr><tr><td align="center">choice(a[,size,replace,p])</td><td align="center">从一维数组a中以概率p抽取元素，形成size形状新数组,replace表示是否可以重用元素，默认为False</td></tr></tbody></table><p><strong>np.random的随机数函数(3)</strong></p><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">uniform(low,high,size)</td><td align="center">产生具有均匀分布的数组，low起始值，high结束值，size形状</td></tr><tr><td align="center">normal(loc,scale,size)</td><td align="center">产生具有正态分布的数组，loc均值，scale标准差，size形状</td></tr><tr><td align="center">poisson(lam,size)</td><td align="center">产生具有泊松分布的数组，lam随机事件发生率，size形状</td></tr></tbody></table><h1 id="NumPy的统计函数"><a href="#NumPy的统计函数" class="headerlink" title="NumPy的统计函数"></a>NumPy的统计函数</h1><p><strong>np.random的统计函数(1)</strong></p><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">sum(a,axis=None)</td><td align="center">根据给定轴axis计算数组a相关元素之和，axis整数或元组</td></tr><tr><td align="center">mean(a,axis=None)</td><td align="center">根据给定轴axis计算数组a相关元素的期望，axis整数或元组</td></tr><tr><td align="center">average(a,axis=None,weights=None)</td><td align="center">根据给定轴axis计算数组a相关元素的加权平均值</td></tr><tr><td align="center">std(a,axis=None)</td><td align="center">根据给定轴axis计算数组a相关元素的标准差</td></tr><tr><td align="center">var(a,axis=None)</td><td align="center">根据给定轴axis计算数组a相关元素的方差</td></tr></tbody></table><p><strong>np.random的统计函数(2)</strong></p><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">min(a) max(a)</td><td align="center">计算数组a中元素的最小值、最大值</td></tr><tr><td align="center">argmin(a) argmax(a)</td><td align="center">计算数组a中元素最小值、最大值的降一维后下标</td></tr><tr><td align="center">unravel_index(index,shape)</td><td align="center">根据shape将一维下标index转换成多维下标</td></tr><tr><td align="center">ptp(a)</td><td align="center">计算数组a中元素最大值与最小值的差</td></tr><tr><td align="center">median(a)</td><td align="center">计算数组a中元素的中位数(中值)</td></tr></tbody></table><h1 id="NumPy的梯度函数"><a href="#NumPy的梯度函数" class="headerlink" title="NumPy的梯度函数"></a>NumPy的梯度函数</h1><p>NumPy的梯度函数只有一个  </p><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">np.gradient()</td><td align="center">计算数组f中元素的梯度，当f为多维时，返回每个维度梯度</td></tr></tbody></table><p><strong>梯度：连续值之间的变化率，即斜率</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据的CSV文件存取&quot;&gt;&lt;a href=&quot;#数据的CSV文件存取&quot; class=&quot;headerlink&quot; title=&quot;数据的CSV文件存取&quot;&gt;&lt;/a&gt;数据的CSV文件存取&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;CSV(Comma-Separated Value,逗号分隔
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python数据分析与展示（第1周 数据分析之表示 单元一 NumPy库入门）</title>
    <link href="https://jluliyuxi.github.io/2020/07/11/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%B1%95%E7%A4%BA%EF%BC%88%E7%AC%AC1%E5%91%A8%20%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E8%A1%A8%E7%A4%BA%20%E5%8D%95%E5%85%83%E4%B8%80%20NumPy%E5%BA%93%E5%85%A5%E9%97%A8%EF%BC%89/"/>
    <id>https://jluliyuxi.github.io/2020/07/11/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%B1%95%E7%A4%BA%EF%BC%88%E7%AC%AC1%E5%91%A8%20%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E8%A1%A8%E7%A4%BA%20%E5%8D%95%E5%85%83%E4%B8%80%20NumPy%E5%BA%93%E5%85%A5%E9%97%A8%EF%BC%89/</id>
    <published>2020-07-11T03:25:10.770Z</published>
    <updated>2020-07-25T00:22:36.610Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据的维度"><a href="#数据的维度" class="headerlink" title="数据的维度"></a>数据的维度</h1><p><strong>维度</strong>：一组数据的组织形式        </p><p>一维数据：由对等关系的有序或无序数据构成，采用线性方式组织。      </p><p>列表数据类型可以不同，数组数据类型必须相同。      </p><p>二维数据：由多个一维数据构成，是一维数据的组合形式。      </p><p>数据维度的Python表示：      </p><p>一维数据：列表+集合<br>二维数据：列表<br>三维数据：列表     </p><h1 id="NumPy的数组对象：ndarray"><a href="#NumPy的数组对象：ndarray" class="headerlink" title="NumPy的数组对象：ndarray"></a>NumPy的数组对象：ndarray</h1><p>NumPy是一个开源的Python科学计算库<br>※一个强大的N维数组对象 ndarray<br>※广播功能函数<br>※整合C/C++/Fortran代码的工具<br>※线性代数、傅里叶变换、随机数生成等功能        </p><h2 id="NumPy的引用"><a href="#NumPy的引用" class="headerlink" title="NumPy的引用"></a>NumPy的引用</h2><p><code>import numpy as np</code>引用NumPy库<br><strong>尽量使用约定的别名np</strong></p><h2 id="N维度数组对象：ndarray"><a href="#N维度数组对象：ndarray" class="headerlink" title="N维度数组对象：ndarray"></a>N维度数组对象：ndarray</h2><p><strong>例如：计算A平方+B三次方，其中，A和B是一维数组</strong>   </p><p><strong>常规方法：</strong>     </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pySum</span><span class="params">()</span>:</span></span><br><span class="line">    a = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">    b = [<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>]</span><br><span class="line">    c = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</span><br><span class="line">        c.append(a[i]**<span class="number">2</span> + b[i]**<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line">print(pySum())</span><br></pre></td></tr></table></figure><p><strong>ndarray方法:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">npSum</span><span class="params">()</span>:</span></span><br><span class="line">    a = np.array([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">    b = np.array([<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">    c = a**<span class="number">2</span> + b**<span class="number">3</span> <span class="comment">#维度相同时可直接进行计算</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line">print(npSum())</span><br></pre></td></tr></table></figure><p><strong>※数组对象可以去掉元素间运算所需的循环，使一维向量更像个单个数据。</strong>  </p><p><strong>※设置专门的数组对象，经过优化，可以提升这类应用的运算速度。</strong>      </p><h2 id="ndarray简述"><a href="#ndarray简述" class="headerlink" title="ndarray简述"></a>ndarray简述</h2><p>ndarray是一个多维数组对象，由两部分组成：    </p><p>※实际的数据      </p><p>※描述这些数据的元数据（数据维度、数据类型等）     </p><p><code>np.array()</code>生成一个ndarray数组<br><em>ndarray在程序中的别名是：array</em>     </p><p>np.array()输出成[]形式，元素由空格分割。      </p><p><strong>轴(axis)：保存数据的维度</strong>     </p><p><strong>秩(rank)：轴的数量</strong>    </p><h2 id="ndarray对象的属性"><a href="#ndarray对象的属性" class="headerlink" title="ndarray对象的属性"></a>ndarray对象的属性</h2><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">.ndim</td><td align="center">秩，即轴的数量或维度的数量</td></tr><tr><td align="center">.shape</td><td align="center">ndarray对象的尺度，对于矩阵，n行m列</td></tr><tr><td align="center">.size</td><td align="center">ndarray对象元素的个数，相当于.shape中n* m的值</td></tr><tr><td align="center">.dtype</td><td align="center">ndarray对象的元素类型</td></tr><tr><td align="center">.itemsize</td><td align="center">ndarray对象中每个元素的大小，以字节为单位</td></tr></tbody></table><h2 id="ndarray的元素类型"><a href="#ndarray的元素类型" class="headerlink" title="ndarray的元素类型"></a>ndarray的元素类型</h2><p><img src="https://i.loli.net/2020/07/11/VBJsknFgWUYbC5S.png" alt="ndarray的元素类型①"> </p><p><img src="https://i.loli.net/2020/07/11/qk7uOPKNmsJF5Ll.png" alt="ndarray的元素类型②"></p><p><img src="https://i.loli.net/2020/07/11/HYBQnRzukqpE8Od.png" alt="ndarray的元素类型③"></p><h1 id="ndarray数组的创建和变换"><a href="#ndarray数组的创建和变换" class="headerlink" title="ndarray数组的创建和变换"></a>ndarray数组的创建和变换</h1><h2 id="ndarray的创建方法："><a href="#ndarray的创建方法：" class="headerlink" title="ndarray的创建方法："></a>ndarray的创建方法：</h2><p>① 从Python中的列表、元组等类型创建ndarray数组。     </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = np.array(list/tuple)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = np.array(list/tuple,dtype=np.float32) <span class="comment">#指定元素数据类型`</span></span><br></pre></td></tr></table></figure><p>当np.array()不指定dtype时，NumPy将根据数据情况关联一个dtype类型。       </p><p>② 使用NumPy中函数创建ndarray数组，如：arange,ones,zeros等。       </p><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">np.arange(n)</td><td align="center">类似range(函数，返回ndarray类型， 元素从0到n-1</td></tr><tr><td align="center">np.ones(shape)</td><td align="center">根据shape生成一 个全 1数组，shape是元组类型</td></tr><tr><td align="center">np.zeros(shape)</td><td align="center">根据shape生成一 个 全0数组，shape是元组类型</td></tr><tr><td align="center">np.full(shape,va1)</td><td align="center">根据shape生成一个数组，每个元素值都是val</td></tr><tr><td align="center">np.eye(n)</td><td align="center">创建一个正方的n*n单位矩阵，对角线为1，其余为0</td></tr><tr><td align="center">np.ones_like(a)</td><td align="center">根据数组a的形状生成一个全1数组</td></tr><tr><td align="center">np.zeros_like(a)</td><td align="center">根据数组a的形状生成一个全0数组</td></tr><tr><td align="center">np.full_like(a,val)</td><td align="center">根据数组a的形状生成一个数组， 每个元素值都是val</td></tr><tr><td align="center">np.linspace()</td><td align="center">根据起止数据等间距地填充数据，形成数组</td></tr><tr><td align="center">np.concatenate()</td><td align="center">将两个或多个数组合并成一个新的数组</td></tr></tbody></table><p>③ 从字节流（raw bytes)中创建ndarray数组。</p><p>④ 从文件中读取特定格式，创建ndarray数组。</p><h2 id="ndarray数组的维度变换"><a href="#ndarray数组的维度变换" class="headerlink" title="ndarray数组的维度变换"></a>ndarray数组的维度变换</h2><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">.reshape(shape)</td><td align="center">不改变数组元素，返回一个shape形状的数组，原数组不变</td></tr><tr><td align="center">.resize(shape)</td><td align="center">与.reshape()功能一致， 但修改原数组</td></tr><tr><td align="center">.swapaxes(ax1,ax2)</td><td align="center">将数组n个维度中两个维度进行调换</td></tr><tr><td align="center">.flatten()</td><td align="center">对数组进行降维，返回折叠后的一维数组，原数组不变</td></tr></tbody></table><h1 id="ndarray数组的操作"><a href="#ndarray数组的操作" class="headerlink" title="ndarray数组的操作"></a>ndarray数组的操作</h1><p>即对数组的<strong>索引</strong>和<strong>切片</strong></p><h2 id="一维数组的索引和切片：与Python类似"><a href="#一维数组的索引和切片：与Python类似" class="headerlink" title="一维数组的索引和切片：与Python类似"></a>一维数组的索引和切片：与Python类似</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>])</span><br><span class="line">a[<span class="number">2</span>] <span class="comment"># out:7</span></span><br><span class="line">a[<span class="number">1</span>:<span class="number">4</span>:<span class="number">2</span>] <span class="comment"># out:array([8,6])</span></span><br></pre></td></tr></table></figure><h2 id="多维数组的索引："><a href="#多维数组的索引：" class="headerlink" title="多维数组的索引："></a>多维数组的索引：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">24</span>).reshape((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">a[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] <span class="comment"># out:23</span></span><br><span class="line">a[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>] <span class="comment"># out:6</span></span><br><span class="line">a[<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-3</span>] <span class="comment"># out:17</span></span><br><span class="line"><span class="comment">#每个维度一个索引值，用逗号分隔</span></span><br></pre></td></tr></table></figure><h2 id="多维数组的切片："><a href="#多维数组的切片：" class="headerlink" title="多维数组的切片："></a>多维数组的切片：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">24</span>).reshape((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">a[:,<span class="number">1</span>,<span class="number">-3</span>] <span class="comment"># out:array([5,17])</span></span><br><span class="line">a[:,<span class="number">1</span>:<span class="number">3</span>,:]</span><br><span class="line">a[:,:,::<span class="number">2</span>]</span><br></pre></td></tr></table></figure><h1 id="ndarray数组的运算"><a href="#ndarray数组的运算" class="headerlink" title="ndarray数组的运算"></a>ndarray数组的运算</h1><h2 id="数组与标量之间的运算"><a href="#数组与标量之间的运算" class="headerlink" title="数组与标量之间的运算"></a>数组与标量之间的运算</h2><p>数组与标量之间的运算作用于数组的每一个元素       </p><p><img src="https://i.loli.net/2020/07/11/DPIQtpvEOHslqJA.png" alt=""></p><h2 id="NumPy一元函数"><a href="#NumPy一元函数" class="headerlink" title="NumPy一元函数"></a>NumPy一元函数</h2><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">np.abs(x) np.fabs(x)</td><td align="center">计算数组各元素的绝对值</td></tr><tr><td align="center">np.sqrt(x)</td><td align="center">计算数组各元素的平方根</td></tr><tr><td align="center">np.square(x)</td><td align="center">计算数组各元素的平方</td></tr><tr><td align="center">np.log(x) np.log10(x) np.log2(x)</td><td align="center">计算数组各元素的自然对数、10底对数和2底对数</td></tr><tr><td align="center">np.ceil(x) np.floor(x)</td><td align="center">计算数组各 元素的eiling值或noor值</td></tr><tr><td align="center">np.rint(x)</td><td align="center">计算数组各元素的四舍五入值</td></tr><tr><td align="center">np.modf(x)</td><td align="center">将数组各元素的小数和整数部分以两个独立数组形式返回</td></tr><tr><td align="center">np.cos(x) np.cosh(x)</td><td align="center"></td></tr><tr><td align="center">np.sin(x) np.sinh(x)</td><td align="center">计算数组各元素的普通型和双曲型三角函数</td></tr><tr><td align="center">np.tan(x) np.tanh(x)</td><td align="center"></td></tr><tr><td align="center">np.exp(x)</td><td align="center">计算数组各元素的指数值</td></tr><tr><td align="center">np.sign(x)</td><td align="center">计算数组各元素的符号值，1(+),0, -1(-)</td></tr></tbody></table><h2 id="NumPy二元函数"><a href="#NumPy二元函数" class="headerlink" title="NumPy二元函数"></a>NumPy二元函数</h2><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>+ - * / **</code></td><td align="center">两个数组各元素进行对应运算</td></tr><tr><td align="center">np.maximum(x,y) np.fmax()</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">元素级的最大值/最小值计算</td></tr><tr><td align="center">np.minimum(x,y) np.fmin()</td><td align="center"></td></tr><tr><td align="center">np.mod(x,y)</td><td align="center">元素级的模运算</td></tr><tr><td align="center">np.copysign(x,y)</td><td align="center">将数组y中各元素值的符号赋值给数组x对应元素</td></tr><tr><td align="center"><code>&gt; &lt; &gt;= &lt;= == !=</code></td><td align="center">算术比较，产生布尔型数组</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据的维度&quot;&gt;&lt;a href=&quot;#数据的维度&quot; class=&quot;headerlink&quot; title=&quot;数据的维度&quot;&gt;&lt;/a&gt;数据的维度&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;维度&lt;/strong&gt;：一组数据的组织形式        &lt;/p&gt;
&lt;p&gt;一维数据：由对等关系的有序
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python数据分析与展示（第0周 数据分析之前奏）</title>
    <link href="https://jluliyuxi.github.io/2020/07/10/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%B1%95%E7%A4%BA%EF%BC%88%E7%AC%AC0%E5%91%A8%20%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E5%89%8D%E5%A5%8F%EF%BC%89/"/>
    <id>https://jluliyuxi.github.io/2020/07/10/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%B1%95%E7%A4%BA%EF%BC%88%E7%AC%AC0%E5%91%A8%20%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E5%89%8D%E5%A5%8F%EF%BC%89/</id>
    <published>2020-07-10T13:47:51.138Z</published>
    <updated>2020-07-25T00:22:37.305Z</updated>
    
    <content type="html"><![CDATA[<h1 id="“数据分析”课程内容导学"><a href="#“数据分析”课程内容导学" class="headerlink" title="“数据分析”课程内容导学"></a>“数据分析”课程内容导学</h1><p>NumPy库，Matplotlib库，Pandas库      </p><p><strong>摘要</strong>：有损地提取数据特征的过程<br>※基本统计(含排序)<br>※分布/累计统计<br>※数据特征，相关性、周期性等<br>※数据挖掘(形成知识)     </p><p><strong><em>建议使用Anaconda IDE</em></strong>      </p><p><strong><em>理解和掌握 conda Spyder IPython 的使用</em></strong>        </p><p><strong>内容组织</strong>：<br>绘制坐标系、饼图、直方图、极坐标图、散点图<br>实例1：图像的手绘效果<br>实例2：引力波的绘制<br>实例3：房价趋势的关联因素分析<br>实例4：股票数据的趋势分析曲线     </p><h1 id="Anaconda-IDE的基本使用"><a href="#Anaconda-IDE的基本使用" class="headerlink" title="Anaconda IDE的基本使用"></a>Anaconda IDE的基本使用</h1><h2 id="包管理和环境管理工具-conda"><a href="#包管理和环境管理工具-conda" class="headerlink" title="包管理和环境管理工具-conda"></a>包管理和环境管理工具-conda</h2><p>包管理与pip类似，管理Python第三方库      </p><p>环境管理能够允许用户使用不同版本的Python，并能灵活切换。</p><p>启动cmd,执行<code>conda --version</code>，可获取conda版本号</p><h2 id="Anaconda-一个集合，包括conda、某版本Python、一批第三方库等。"><a href="#Anaconda-一个集合，包括conda、某版本Python、一批第三方库等。" class="headerlink" title="Anaconda:一个集合，包括conda、某版本Python、一批第三方库等。"></a>Anaconda:一个集合，包括conda、某版本Python、一批第三方库等。</h2><h2 id="编程工具：Spyder"><a href="#编程工具：Spyder" class="headerlink" title="编程工具：Spyder"></a>编程工具：Spyder</h2><p>包括编辑区、文件导航和IPython      </p><h2 id="交互式编程环境：IPython"><a href="#交互式编程环境：IPython" class="headerlink" title="交互式编程环境：IPython"></a>交互式编程环境：IPython</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;“数据分析”课程内容导学&quot;&gt;&lt;a href=&quot;#“数据分析”课程内容导学&quot; class=&quot;headerlink&quot; title=&quot;“数据分析”课程内容导学&quot;&gt;&lt;/a&gt;“数据分析”课程内容导学&lt;/h1&gt;&lt;p&gt;NumPy库，Matplotlib库，Pandas库    
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python网络爬虫与信息提取（第4周 网络爬虫框架 第十一单元 股票数据Scrapy爬虫）</title>
    <link href="https://jluliyuxi.github.io/2020/07/03/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E4%B8%8E%E4%BF%A1%E6%81%AF%E6%8F%90%E5%8F%96%EF%BC%88%E7%AC%AC4%E5%91%A8%20%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%20%E7%AC%AC%E5%8D%81%E4%B8%80%E5%8D%95%E5%85%83%20%E8%82%A1%E7%A5%A8%E6%95%B0%E6%8D%AEScrapy%E7%88%AC%E8%99%AB%EF%BC%89/"/>
    <id>https://jluliyuxi.github.io/2020/07/03/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E4%B8%8E%E4%BF%A1%E6%81%AF%E6%8F%90%E5%8F%96%EF%BC%88%E7%AC%AC4%E5%91%A8%20%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%20%E7%AC%AC%E5%8D%81%E4%B8%80%E5%8D%95%E5%85%83%20%E8%82%A1%E7%A5%A8%E6%95%B0%E6%8D%AEScrapy%E7%88%AC%E8%99%AB%EF%BC%89/</id>
    <published>2020-07-03T03:11:31.724Z</published>
    <updated>2020-07-25T00:26:54.333Z</updated>
    
    <content type="html"><![CDATA[<h1 id="股票数据Scrapy爬虫实例介绍"><a href="#股票数据Scrapy爬虫实例介绍" class="headerlink" title="股票数据Scrapy爬虫实例介绍"></a>股票数据Scrapy爬虫实例介绍</h1><hr><p>获取股票列表:     </p><p>东方财富网: <a href="http://quote.eastmoney.com/stocklist.html" target="_blank" rel="noopener">http://quote.eastmoney.com/stocklist.html</a>        </p><p>获取个股信息:     </p><p>百度股票: <a href="https://gupiao.baidu.com/stock/" target="_blank" rel="noopener">https://gupiao.baidu.com/stock/</a>       </p><p>单个股票: <a href="https://gupiao.baidu.com/stock/sz002439.html" target="_blank" rel="noopener">https://gupiao.baidu.com/stock/sz002439.html</a>      </p><h1 id="股票数据Scrapy爬虫实例编写"><a href="#股票数据Scrapy爬虫实例编写" class="headerlink" title="股票数据Scrapy爬虫实例编写"></a>股票数据Scrapy爬虫实例编写</h1><h2 id="Stocks-py"><a href="#Stocks-py" class="headerlink" title="Stocks.py"></a>Stocks.py</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StocksSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"stocks"</span></span><br><span class="line">    start_urls = [<span class="string">'https://quote.eastmoney.com/stocklist.html'</span>]</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> href <span class="keyword">in</span> response.css(<span class="string">'a::attr(href)'</span>).extract():</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                stock = re.findall(<span class="string">r"[s][hz]\d&#123;6&#125;"</span>, href)[<span class="number">0</span>]</span><br><span class="line">                url = <span class="string">'https://gupiao.baidu.com/stock/'</span> + stock + <span class="string">'.html'</span></span><br><span class="line">                <span class="keyword">yield</span> scrapy.Request(url, callback=self.parse_stock)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_stock</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        infoDict = &#123;&#125;</span><br><span class="line">        stockInfo = response.css(<span class="string">'.stock-bets'</span>)</span><br><span class="line">        name = stockInfo.css(<span class="string">'.bets-name'</span>).extract()[<span class="number">0</span>]</span><br><span class="line">        keyList = stockInfo.css(<span class="string">'dt'</span>).extract()</span><br><span class="line">        valueList = stockInfo.css(<span class="string">'dd'</span>).extract()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(keyList)):</span><br><span class="line">            key = re.findall(<span class="string">r'&gt;.*&lt;/dt&gt;'</span>, keyList[i])[<span class="number">0</span>][<span class="number">1</span>:<span class="number">-5</span>]</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                val = re.findall(<span class="string">r'\d+\.?.*&lt;/dd&gt;'</span>, valueList[i])[<span class="number">0</span>][<span class="number">0</span>:<span class="number">-5</span>]</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                val = <span class="string">'--'</span></span><br><span class="line">            infoDict[key]=val</span><br><span class="line"> </span><br><span class="line">        infoDict.update(</span><br><span class="line">            &#123;<span class="string">'股票名称'</span>: re.findall(<span class="string">'\s.*\('</span>,name)[<span class="number">0</span>].split()[<span class="number">0</span>] + \</span><br><span class="line">             re.findall(<span class="string">'\&gt;.*\&lt;'</span>, name)[<span class="number">0</span>][<span class="number">1</span>:<span class="number">-1</span>]&#125;)</span><br><span class="line">        <span class="keyword">yield</span> infoDict</span><br></pre></td></tr></table></figure><h2 id="Pipelines-py"><a href="#Pipelines-py" class="headerlink" title="Pipelines.py"></a>Pipelines.py</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Define your item pipelines here</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span></span><br><span class="line"><span class="comment"># See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaidustocksPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaidustocksInfoPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        self.f = open(<span class="string">'BaiduStockInfo.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        self.f.close()</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            line = str(dict(item)) + <span class="string">'\n'</span></span><br><span class="line">            self.f.write(line)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;股票数据Scrapy爬虫实例介绍&quot;&gt;&lt;a href=&quot;#股票数据Scrapy爬虫实例介绍&quot; class=&quot;headerlink&quot; title=&quot;股票数据Scrapy爬虫实例介绍&quot;&gt;&lt;/a&gt;股票数据Scrapy爬虫实例介绍&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;获取股票列表:  
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python网络爬虫与信息提取（第4周 网络爬虫框架 第十一单元 Scrapy爬虫基本使用）</title>
    <link href="https://jluliyuxi.github.io/2020/06/21/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E4%B8%8E%E4%BF%A1%E6%81%AF%E6%8F%90%E5%8F%96%EF%BC%88%E7%AC%AC4%E5%91%A8%20%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%20%E7%AC%AC%E5%8D%81%E4%B8%80%E5%8D%95%E5%85%83%20Scrapy%E7%88%AC%E8%99%AB%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%EF%BC%89/"/>
    <id>https://jluliyuxi.github.io/2020/06/21/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E4%B8%8E%E4%BF%A1%E6%81%AF%E6%8F%90%E5%8F%96%EF%BC%88%E7%AC%AC4%E5%91%A8%20%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%20%E7%AC%AC%E5%8D%81%E4%B8%80%E5%8D%95%E5%85%83%20Scrapy%E7%88%AC%E8%99%AB%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%EF%BC%89/</id>
    <published>2020-06-21T09:28:17.598Z</published>
    <updated>2020-07-25T00:26:43.750Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Scrapy爬虫的第一个实例"><a href="#Scrapy爬虫的第一个实例" class="headerlink" title="Scrapy爬虫的第一个实例"></a>Scrapy爬虫的第一个实例</h1><p>演示HTML页面地址：     </p><p><a href="http://python123.io/ws/demo.html" target="_blank" rel="noopener">http://python123.io/ws/demo.html</a>    </p><p>文件名称：demo.html</p><p><strong>爬虫步骤：</strong>   </p><ol><li>建立一个Scrapy爬虫工程       </li></ol><p>在工程路径下打开cmd, 输入<code>scrapy stratproject python123demo</code>,定义一个名为python123demo的文件夹  </p><p><img src="https://i.loli.net/2020/06/21/bAQupzMg26taRKX.png" alt=""></p><p>随后打开路径，会发现已经建立好了一个文件夹   </p><p><img src="https://i.loli.net/2020/06/21/wH123tiZGexsd9b.png" alt=""></p><p>生成的工程路径： </p><p><img src="https://i.loli.net/2020/06/21/4kyHIgZ78iR2vfd.png" alt=""></p><p><img src="https://i.loli.net/2020/06/21/uOcdYtlCspKI1Qh.png" alt=""></p><ol start="2"><li>在工程中产生一个Scrapy爬虫     </li></ol><p>进入python123demo,cmd输入<code>scrapy genspider demo python123.io</code>产生名为demo的spider</p><p><img src="https://i.loli.net/2020/06/21/JDwHBoA8zhUExbv.png" alt="生成一条名称为demo的spider"></p><p>生成爬虫的代码内容：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#demo.py文件</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'demo'</span>   <span class="comment">#名称</span></span><br><span class="line">    allowed_domains = [<span class="string">'python123.io'</span>]  <span class="comment">#只能爬虫这个域名以下的链接</span></span><br><span class="line">    start_urls = [<span class="string">'http://python123.io/'</span>]   <span class="comment">#爬取页面的初始页面</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><strong>parse()用于处理响应，解析内容形成字典，发现新的URL爬取请求。</strong></p><ol start="3"><li>配置产生的spider爬虫    </li></ol><p>对上述spider进行配置：  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'demo'</span></span><br><span class="line">    allowed_domains = [<span class="string">'python123.io'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://python123.io/ws/demo.html'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        fname = response.url.split(<span class="string">'/'</span>)[<span class="number">-1</span>] <span class="comment">#存储到本地的response文件名称</span></span><br><span class="line">        <span class="keyword">with</span> open(fname, <span class="string">'wb'</span>) <span class="keyword">as</span> f :</span><br><span class="line">            f.write(response.body)</span><br><span class="line">        self.log(<span class="string">"Saved file %s."</span> % name)</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ol start="4"><li>运行爬虫，获取网页    </li></ol><p>cmd内输入<code>scrapy crawl demo</code>，捕获页面存储在html文件中</p><p><img src="https://i.loli.net/2020/06/21/zI2sELjWvt3frpF.png" alt=""></p><h2 id="yield关键字的使用"><a href="#yield关键字的使用" class="headerlink" title="yield关键字的使用"></a>yield关键字的使用</h2><p>生成器是一个不断产生值的函数。      </p><p>包含yield语句的函数是一个生成器。     </p><p>生成器每次产生一个值(yield语句)，函数被冻结，被唤醒后再产生一个值。</p><p><strong><em>生成器写法：</em></strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen</span><span class="params">(n)</span> :</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n) :</span><br><span class="line">        <span class="keyword">yield</span> i ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> gen(<span class="number">5</span>):</span><br><span class="line">    print(i, <span class="string">' '</span>, end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure><p><strong><em>普通写法：</em></strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span><span class="params">(n)</span> :</span></span><br><span class="line">    ls = [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">    <span class="keyword">return</span> ls</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> square(<span class="number">5</span>):</span><br><span class="line">    print(i, <span class="string">' '</span>, end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure><p>生成器：<br>更节省存储空间<br>响应更迅速<br>使用更灵活   </p><h1 id="Scrapy爬虫的基本使用"><a href="#Scrapy爬虫的基本使用" class="headerlink" title="Scrapy爬虫的基本使用"></a>Scrapy爬虫的基本使用</h1><p><strong>Scrapy爬虫的使用步骤</strong></p><p>步骤一：创建一个工程和Spider模板     </p><p>步骤二：编写Spider    </p><p>步骤三：编写Item Pipeline     </p><p>步骤四：优化配置策略      </p><p><strong>Scrapy爬虫的数据类型</strong></p><p>Request类：表示一个HTTP请求，由Spider生成，由Downloader执行。    </p><table><thead><tr><th align="center">属性或方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">.url</td><td align="center">Request对应的请求URL地址</td></tr><tr><td align="center">.method</td><td align="center">对应的请求方法，’GET’ ‘POST’等</td></tr><tr><td align="center">.headers</td><td align="center">字典类型风格的请求头</td></tr><tr><td align="center">.body</td><td align="center">请求内容主体，字符串类型</td></tr><tr><td align="center">.meta</td><td align="center">用户添加的扩展信息，在Scrapy内部模块间传递信息使用</td></tr><tr><td align="center">.copy()</td><td align="center">复制该请求</td></tr></tbody></table><p>Response类：表示一个HTTP响应，由Downloader生成，由Spider处理</p><table><thead><tr><th align="center">属性或方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">.url</td><td align="center">Response对应的URL地址</td></tr><tr><td align="center">.status</td><td align="center">HTTP状态码，默认是200</td></tr><tr><td align="center">.headers</td><td align="center">Response对应的头部信息</td></tr><tr><td align="center">.body</td><td align="center">Response对应的内容信息，字符串类型</td></tr><tr><td align="center">.flags</td><td align="center">一组标记</td></tr><tr><td align="center">.request</td><td align="center">产生Response类型对应的Request对象</td></tr><tr><td align="center">.copy()</td><td align="center">复制该响应</td></tr></tbody></table><p>Item类：表示从一个HTML页面中提取的信息内容，由Spider生成，由Item Pipeline处理<br>类似于字典，可用字典类型使用      </p><p><strong>CSS Selector的基本使用：</strong></p><p><img src="https://i.loli.net/2020/06/21/fjLIdzmBqwYDb65.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Scrapy爬虫的第一个实例&quot;&gt;&lt;a href=&quot;#Scrapy爬虫的第一个实例&quot; class=&quot;headerlink&quot; title=&quot;Scrapy爬虫的第一个实例&quot;&gt;&lt;/a&gt;Scrapy爬虫的第一个实例&lt;/h1&gt;&lt;p&gt;演示HTML页面地址：     &lt;/p&gt;
&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>从键盘输入年月日，计算是这一年中的第几天</title>
    <link href="https://jluliyuxi.github.io/2020/06/21/%E4%BB%8E%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5%E5%B9%B4%E6%9C%88%E6%97%A5%EF%BC%8C%E8%AE%A1%E7%AE%97%E6%98%AF%E8%BF%99%E4%B8%80%E5%B9%B4%E4%B8%AD%E7%9A%84%E7%AC%AC%E5%87%A0%E5%A4%A9/"/>
    <id>https://jluliyuxi.github.io/2020/06/21/%E4%BB%8E%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5%E5%B9%B4%E6%9C%88%E6%97%A5%EF%BC%8C%E8%AE%A1%E7%AE%97%E6%98%AF%E8%BF%99%E4%B8%80%E5%B9%B4%E4%B8%AD%E7%9A%84%E7%AC%AC%E5%87%A0%E5%A4%A9/</id>
    <published>2020-06-21T07:55:41.822Z</published>
    <updated>2020-07-25T00:27:13.900Z</updated>
    
    <content type="html"><![CDATA[<p>这个问题是我同学给我的期末Python模拟题里面的一道，最开始我是试着用判断是否闰年，分30天的月份和31天的月份。      </p><p>结果代码越写越长，显然是不太合适的。       </p><p>下面的是我用最初的方法写的代码：     </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">months_days30 = [<span class="number">4</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">11</span>]</span><br><span class="line">months_days31 = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">12</span>]</span><br><span class="line">month_Feb = <span class="number">2</span> <span class="comment">#区分不同的月份对应的天数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isleapyear</span><span class="params">(year)</span> :</span> <span class="comment">#判断是否为闰年</span></span><br><span class="line">    <span class="keyword">if</span> year % <span class="number">4</span> == <span class="number">0</span> :</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span> <span class="comment">#计算天数</span></span><br><span class="line">    year = eval(input(<span class="string">"请输入年份："</span>))</span><br><span class="line">    month = eval(input(<span class="string">"请输入月份："</span>))</span><br><span class="line">    day = eval(input(<span class="string">"请输入年份："</span>))</span><br><span class="line">    num_day31 = <span class="number">0</span></span><br><span class="line">    num_day30 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> month == <span class="number">1</span> :</span><br><span class="line">        print(str(day))</span><br><span class="line">    <span class="keyword">if</span> month == <span class="number">2</span> :</span><br><span class="line">        print(str(day+<span class="number">31</span>))</span><br><span class="line">    <span class="keyword">for</span> d30 <span class="keyword">in</span> months_days30 :</span><br><span class="line">        <span class="keyword">if</span> d30 &lt; month :</span><br><span class="line">            num_day30 += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> d31 <span class="keyword">in</span> months_days31 :</span><br><span class="line">        <span class="keyword">if</span> d31 &lt; month :</span><br><span class="line">            num_day31 += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> isleapyear(year) :</span><br><span class="line">        print(num_day30 * <span class="number">30</span> + num_day31 * <span class="number">31</span> + <span class="number">29</span> + day)</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        print(num_day30 * <span class="number">30</span> + num_day31 * <span class="number">31</span> + <span class="number">28</span> + day)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>后来又翻了一下嵩天的《Python语言程序设计基础》，复习了一下time库和datetime库，发现几行代码就可以解决。    </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">date_input = input(<span class="string">"请输入日期(年-月-日）："</span>)</span><br><span class="line">t = time.strptime(date_input, <span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">print(time.strftime(<span class="string">'%j'</span>,t))</span><br></pre></td></tr></table></figure><p>具体方法：   </p><table><thead><tr><th align="center">方法</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">%a</td><td align="center">英文星期简写</td></tr><tr><td align="center">%A</td><td align="center">英文星期的完全</td></tr><tr><td align="center">%b</td><td align="center">英文月份的简写</td></tr><tr><td align="center">%B</td><td align="center">英文月份的完全</td></tr><tr><td align="center">%c</td><td align="center">显示本地日期时间</td></tr><tr><td align="center">%d</td><td align="center">日期，取1-31</td></tr><tr><td align="center">%H</td><td align="center">小时， 0-23</td></tr><tr><td align="center">%I</td><td align="center">小时， 0-12</td></tr><tr><td align="center">%m</td><td align="center">月， 01 -12</td></tr><tr><td align="center">%M</td><td align="center">分钟，1-59</td></tr><tr><td align="center">%j</td><td align="center">年中当天的天数</td></tr><tr><td align="center">%w</td><td align="center">显示今天是星期几</td></tr><tr><td align="center">%W</td><td align="center">第几周</td></tr><tr><td align="center">%x</td><td align="center">当天日期</td></tr><tr><td align="center">%X</td><td align="center">本地的当天时间</td></tr><tr><td align="center">%y</td><td align="center">年份 00-99间</td></tr><tr><td align="center">%Y</td><td align="center">年份的完整拼写</td></tr></tbody></table><p>所以在这个实例中，直接用<code>%j</code>即可显示日期对应的当年天数。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这个问题是我同学给我的期末Python模拟题里面的一道，最开始我是试着用判断是否闰年，分30天的月份和31天的月份。      &lt;/p&gt;
&lt;p&gt;结果代码越写越长，显然是不太合适的。       &lt;/p&gt;
&lt;p&gt;下面的是我用最初的方法写的代码：     &lt;/p&gt;
&lt;figur
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python网络爬虫与信息提取（第4周 网络爬虫框架 第十单元 Scrapy爬虫框架）</title>
    <link href="https://jluliyuxi.github.io/2020/06/20/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E4%B8%8E%E4%BF%A1%E6%81%AF%E6%8F%90%E5%8F%96%EF%BC%88%E7%AC%AC4%E5%91%A8%20%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%20%E7%AC%AC%E5%8D%81%E5%8D%95%E5%85%83%20Scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%EF%BC%89/"/>
    <id>https://jluliyuxi.github.io/2020/06/20/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E4%B8%8E%E4%BF%A1%E6%81%AF%E6%8F%90%E5%8F%96%EF%BC%88%E7%AC%AC4%E5%91%A8%20%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%20%E7%AC%AC%E5%8D%81%E5%8D%95%E5%85%83%20Scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%EF%BC%89/</id>
    <published>2020-06-20T06:28:47.364Z</published>
    <updated>2020-06-22T09:28:13.095Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Scrapy爬虫框架介绍"><a href="#Scrapy爬虫框架介绍" class="headerlink" title="Scrapy爬虫框架介绍"></a>Scrapy爬虫框架介绍</h1><h2 id="Scrapy的安装"><a href="#Scrapy的安装" class="headerlink" title="Scrapy的安装"></a>Scrapy的安装</h2><p>命令行输入<code>pip install Scrapy</code>       </p><p>安装后小测：执行<code>scrapy -h</code>     </p><p>安装的过程中可能会出现失败的情况，报错显示<code>error:MicrosoftVisual C++ 14.0 is required</code>   </p><p><strong>解决办法：</strong><br>根据Python版本和系统位数选择对应的Twisted模块(<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener">点击此处下载</a>)，例如我的Python是3.8，系统位数为64位，所以选择</p><p><img src="https://i.loli.net/2020/06/20/rL13TsQMgJwFIjA.png" alt=""></p><p>将文件下载到Python/Scripts文件夹，cd到此文件夹内输入<code>pip install Twisted-20.3.0-cp38-cp38-win_amd64.whl</code>      </p><p>安装成功后再输入<code>pip install scrapy</code>即可成功    </p><p>scrapy不单单是一个库，而是一个爬虫框架      </p><p><strong>爬虫框架：</strong>是实现爬虫功能的一个软件结构和功能组件集合      </p><h2 id="Scrapy爬虫框架结构"><a href="#Scrapy爬虫框架结构" class="headerlink" title="Scrapy爬虫框架结构"></a>Scrapy爬虫框架结构</h2><p><strong>5+2结构和3条数据流：</strong></p><p><img src="https://i.loli.net/2020/06/20/UGyuikEcmS3aNzr.png" alt="5+2结构和3条数据流"></p><p>结构中，用户需要编写配置的是模块是<strong>SPIDERS(入口)</strong>和<strong>ITEM PIPELINES(出口)</strong></p><h1 id="Scrapy爬虫框架解析"><a href="#Scrapy爬虫框架解析" class="headerlink" title="Scrapy爬虫框架解析"></a>Scrapy爬虫框架解析</h1><p><strong>Engine：</strong>控制所有模块之间的数据流/根据条件出发事件，不需要用户修改       </p><p><strong>Downloader：</strong>跟去请求下载网页，不需要用户修改     </p><p><strong>Scheduler:</strong>对所有爬取请求进行调度管理，不需要用户修改     </p><p><strong>Downloader Middleware:</strong>实施上述三组模块站之间进行用户可配置的控制。修改、丢弃、新增请求或相应。     </p><p><strong>Spider:</strong>解析Downloader返回的响应(Response)/产生爬取项(scraped item)/产生额外的爬取请求(Request)       </p><p><strong>Item Pipelines:</strong>以流水线方式处理Spider产生的爬取项/由一组操作顺序组成，类似流水线，每个操作是一个Item Pipeline类型/可能操作包括：清理、检验和查重爬取项中的HTML数据，将数据存储到数据库     </p><p><strong>Spider Middleware:</strong>对请求和爬取项的再处理。修改、丢弃、新增请求或爬取项。       </p><h1 id="Requests库和Scrapy框架的比较"><a href="#Requests库和Scrapy框架的比较" class="headerlink" title="Requests库和Scrapy框架的比较"></a>Requests库和Scrapy框架的比较</h1><p><strong>相同点：</strong>       </p><p>两者都可以进行页面请求和爬取，Python爬虫的两个重要技术路线        </p><p>两者可用性都好，文档丰富，入门简单       </p><p>两者都没有处理js、提交表单、应对验证码等功能(可扩展)        </p><p><strong>不同点:</strong>    </p><table><thead><tr><th align="center">requests</th><th align="center">Serapy</th></tr></thead><tbody><tr><td align="center">页面级爬虫</td><td align="center">网站级爬虫</td></tr><tr><td align="center">功能库</td><td align="center">框架</td></tr><tr><td align="center">并发性考虑不足，性能较差</td><td align="center">并发性好，性能较高</td></tr><tr><td align="center">重点在于页面下载</td><td align="center">重点在于爬虫结构</td></tr><tr><td align="center">定制灵活</td><td align="center">一般定制灵活，深度定制困难</td></tr><tr><td align="center">上手十分简单</td><td align="center">入门稍难</td></tr></tbody></table><p><strong><em>对于非常小的需求，用Requests库。</em></strong>      </p><p><strong><em>对于不太小的需求，用Scrapy框架</em></strong></p><h1 id="Scrapy爬虫的常用指令"><a href="#Scrapy爬虫的常用指令" class="headerlink" title="Scrapy爬虫的常用指令"></a>Scrapy爬虫的常用指令</h1><p>Scrapy是为持续运行设计的专业爬虫框架，提供操作的Scrapy命令行。  </p><p>cmd里输入<code>scrapy -h</code>即可打开Scrapy命令行      </p><p>Scrapy命令行格式：    </p><blockquote><p>scrapy<command>[options][args]     </p></blockquote><p><strong>Scrapy常用命令</strong></p><table><thead><tr><th align="center">命令</th><th align="center">说明</th><th align="center">格式</th></tr></thead><tbody><tr><td align="center"><strong>startproject</strong></td><td align="center">创建一个新工程</td><td align="center">scrapy startproject<name>[dir]</td></tr><tr><td align="center"><strong>genspider</strong></td><td align="center">创建一个爬虫</td><td align="center">scrapy genspider [options]<name><domain></td></tr><tr><td align="center">settings</td><td align="center">获得爬虫配置信息</td><td align="center">scrapy settings [options]</td></tr><tr><td align="center"><strong>crawl</strong></td><td align="center">运行一个爬虫</td><td align="center">scrapy crawl <spider></td></tr><tr><td align="center">list</td><td align="center">列出工程中所有爬虫</td><td align="center">scrapy list</td></tr><tr><td align="center">shell</td><td align="center">启动URL调试命令行</td><td align="center">scrapy shell [url]</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Scrapy爬虫框架介绍&quot;&gt;&lt;a href=&quot;#Scrapy爬虫框架介绍&quot; class=&quot;headerlink&quot; title=&quot;Scrapy爬虫框架介绍&quot;&gt;&lt;/a&gt;Scrapy爬虫框架介绍&lt;/h1&gt;&lt;h2 id=&quot;Scrapy的安装&quot;&gt;&lt;a href=&quot;#Scra
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python网络爬虫与信息提取（第3周 网络爬虫实战 第八九单元 实例）</title>
    <link href="https://jluliyuxi.github.io/2020/06/18/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E4%B8%8E%E4%BF%A1%E6%81%AF%E6%8F%90%E5%8F%96%EF%BC%88%E7%AC%AC3%E5%91%A8%20%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98%20%E7%AC%AC%E5%85%AB%E4%B9%9D%E5%8D%95%E5%85%83%20%E5%AE%9E%E4%BE%8B%EF%BC%89/"/>
    <id>https://jluliyuxi.github.io/2020/06/18/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E4%B8%8E%E4%BF%A1%E6%81%AF%E6%8F%90%E5%8F%96%EF%BC%88%E7%AC%AC3%E5%91%A8%20%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98%20%E7%AC%AC%E5%85%AB%E4%B9%9D%E5%8D%95%E5%85%83%20%E5%AE%9E%E4%BE%8B%EF%BC%89/</id>
    <published>2020-06-18T01:04:29.824Z</published>
    <updated>2020-07-25T00:26:45.247Z</updated>
    
    <content type="html"><![CDATA[<h1 id="淘宝商品比价定向爬虫实例"><a href="#淘宝商品比价定向爬虫实例" class="headerlink" title="淘宝商品比价定向爬虫实例"></a>淘宝商品比价定向爬虫实例</h1><hr><p><strong>流程图：</strong></p><p><img src="https://i.loli.net/2020/06/18/2Amz9ujKZkIwlNd.png" alt="流程图"></p><p><strong>代码编写：</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url, timeout=<span class="number">30</span>)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parsePage</span><span class="params">(ilt, html)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plt = re.findall(<span class="string">r'\"view_price\"\:\"[\d\.]*\"'</span>, html)</span><br><span class="line">        tlt = re.findall(<span class="string">r'\"raw_title\"\:\".*?\"'</span>, html)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(plt)):</span><br><span class="line">            price = eval(plt[i].split(<span class="string">':'</span>)[<span class="number">1</span>])</span><br><span class="line">            title = eval(tlt[i].split(<span class="string">':'</span>)[<span class="number">1</span>])</span><br><span class="line">            ilt.append([price, title])</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printGoodsList</span><span class="params">(ilt)</span>:</span></span><br><span class="line">    tplt = <span class="string">"&#123;:4&#125;\t&#123;:8&#125;\t&#123;:16&#125;"</span></span><br><span class="line">    print(tplt.format(<span class="string">"序号"</span>, <span class="string">"价格"</span>, <span class="string">"商品名称"</span>))</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> g <span class="keyword">in</span> ilt:</span><br><span class="line">        count = count + <span class="number">1</span></span><br><span class="line">        print(tplt.format(count, g[<span class="number">0</span>], g[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    goods = <span class="string">'书包'</span></span><br><span class="line">    depth = <span class="number">3</span></span><br><span class="line">    start_url = <span class="string">'https://s.taobao.com/search?q='</span> + goods</span><br><span class="line">    infoList = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(depth):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            url = start_url + <span class="string">'&amp;s='</span> + str(<span class="number">44</span> * i)</span><br><span class="line">            html = getHTMLText(url)</span><br><span class="line">            parsePage(infoList, html)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    printGoodsList(infoList)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h1 id="股票数据定向爬虫实例"><a href="#股票数据定向爬虫实例" class="headerlink" title="股票数据定向爬虫实例"></a>股票数据定向爬虫实例</h1><hr><p>候选数据网站选择：<a href="http://finance.sina.com.cn/stock/" target="_blank" rel="noopener">新浪股票</a>、<a href="https://gupiao.baidu.com/stock/" target="_blank" rel="noopener">百度股票</a>、<a href="http://quote.eastmoney.com/center/gridlist.html#hs_a_board" target="_blank" rel="noopener">东方财富网</a><br><strong>数据网站选择原则：</strong><br>股票信息静态存在于HTML页面中，非js代码生成，没有Robots协议限制。</p><p><strong>流程图：</strong></p><p><img src="https://i.loli.net/2020/06/19/DvXQAj4ikfZswap.png" alt="流程图"></p><p><strong>代码编写：</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#CrawBaiduStocksB.py</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url, code=<span class="string">"utf-8"</span>)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = code</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getStockList</span><span class="params">(lst, stockURL)</span>:</span></span><br><span class="line">    html = getHTMLText(stockURL, <span class="string">"GB2312"</span>)</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">'html.parser'</span>) </span><br><span class="line">    a = soup.find_all(<span class="string">'a'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            href = i.attrs[<span class="string">'href'</span>]</span><br><span class="line">            lst.append(re.findall(<span class="string">r"[s][hz]\d&#123;6&#125;"</span>, href)[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getStockInfo</span><span class="params">(lst, stockURL, fpath)</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> stock <span class="keyword">in</span> lst:</span><br><span class="line">        url = stockURL + stock + <span class="string">".html"</span></span><br><span class="line">        html = getHTMLText(url)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> html==<span class="string">""</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            infoDict = &#123;&#125;</span><br><span class="line">            soup = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line">            stockInfo = soup.find(<span class="string">'div'</span>,attrs=&#123;<span class="string">'class'</span>:<span class="string">'stock-bets'</span>&#125;)</span><br><span class="line"> </span><br><span class="line">            name = stockInfo.find_all(attrs=&#123;<span class="string">'class'</span>:<span class="string">'bets-name'</span>&#125;)[<span class="number">0</span>]</span><br><span class="line">            infoDict.update(&#123;<span class="string">'股票名称'</span>: name.text.split()[<span class="number">0</span>]&#125;)</span><br><span class="line">             </span><br><span class="line">            keyList = stockInfo.find_all(<span class="string">'dt'</span>)</span><br><span class="line">            valueList = stockInfo.find_all(<span class="string">'dd'</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(keyList)):</span><br><span class="line">                key = keyList[i].text</span><br><span class="line">                val = valueList[i].text</span><br><span class="line">                infoDict[key] = val</span><br><span class="line">             </span><br><span class="line">            <span class="keyword">with</span> open(fpath, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write( str(infoDict) + <span class="string">'\n'</span> )</span><br><span class="line">                count = count + <span class="number">1</span></span><br><span class="line">                print(<span class="string">"\r当前进度: &#123;:.2f&#125;%"</span>.format(count*<span class="number">100</span>/len(lst)),end=<span class="string">""</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            count = count + <span class="number">1</span></span><br><span class="line">            print(<span class="string">"\r当前进度: &#123;:.2f&#125;%"</span>.format(count*<span class="number">100</span>/len(lst)),end=<span class="string">""</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    stock_list_url = <span class="string">'http://quote.eastmoney.com/center/gridlist.html#hs_a_board'</span></span><br><span class="line">    stock_info_url = <span class="string">'https://gupiao.baidu.com/stock/'</span></span><br><span class="line">    output_file = <span class="string">'D:/BaiduStockInfo.txt'</span></span><br><span class="line">    slist=[]</span><br><span class="line">    getStockList(slist, stock_list_url)</span><br><span class="line">    getStockInfo(slist, stock_info_url, output_file)</span><br><span class="line"> </span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;淘宝商品比价定向爬虫实例&quot;&gt;&lt;a href=&quot;#淘宝商品比价定向爬虫实例&quot; class=&quot;headerlink&quot; title=&quot;淘宝商品比价定向爬虫实例&quot;&gt;&lt;/a&gt;淘宝商品比价定向爬虫实例&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;流程图：&lt;/strong&gt;&lt;/p&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python网络爬虫与信息提取（第3周 网络爬虫实战 单元七 Re库入门）</title>
    <link href="https://jluliyuxi.github.io/2020/06/17/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E4%B8%8E%E4%BF%A1%E6%81%AF%E6%8F%90%E5%8F%96%EF%BC%88%E7%AC%AC3%E5%91%A8%20%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98%20%E5%8D%95%E5%85%83%E4%B8%83%20Re%E5%BA%93%E5%85%A5%E9%97%A8%EF%BC%89/"/>
    <id>https://jluliyuxi.github.io/2020/06/17/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E4%B8%8E%E4%BF%A1%E6%81%AF%E6%8F%90%E5%8F%96%EF%BC%88%E7%AC%AC3%E5%91%A8%20%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98%20%E5%8D%95%E5%85%83%E4%B8%83%20Re%E5%BA%93%E5%85%A5%E9%97%A8%EF%BC%89/</id>
    <published>2020-06-17T09:52:20.047Z</published>
    <updated>2020-07-25T00:26:46.498Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正则表达式的概念"><a href="#正则表达式的概念" class="headerlink" title="正则表达式的概念"></a>正则表达式的概念</h1><p>Regular expression–Re<br><strong>·通用的字符串表达框架<br>·简洁表达一组字符串的表达式<br>·针对字符串表达“简洁”和“特征”思想的工具<br>·判断某字符串的特征归属</strong>        </p><h1 id="正则表达式的语法"><a href="#正则表达式的语法" class="headerlink" title="正则表达式的语法"></a>正则表达式的语法</h1><p>eg:<strong>P(Y|YT|YTH|YTHO)?N</strong><br>正则表达式由字符和操作符构成       </p><p><strong>正则表达式常用的操作符</strong></p><table><thead><tr><th align="center">操作符</th><th align="center">说明</th><th align="center">实例</th></tr></thead><tbody><tr><td align="center">.</td><td align="center">表示任何单个字符</td><td align="center"></td></tr><tr><td align="center">[ ]</td><td align="center">字符集，对单个字符给出取值范围</td><td align="center">[abe]表示a、 b、c, [a-z]表示a到z单个字符</td></tr><tr><td align="center">[^ ]</td><td align="center">非字符集，对单个字符给出排除范围</td><td align="center">[^abc]表示非a或b或c的单个字符</td></tr><tr><td align="center">*</td><td align="center">前一个字符0次或无限次扩展</td><td align="center">abc*表示ab、abc、abce、abecc等</td></tr><tr><td align="center">+</td><td align="center">前一个字符1次或无限次扩展</td><td align="center">abc+表示abc、abcc、 abccc等</td></tr><tr><td align="center">?</td><td align="center">前一个字符0次或1次扩展</td><td align="center">abc?表示ab、abc</td></tr><tr><td align="center">`</td><td align="center">`</td><td align="center">左右表达式任意一个</td></tr><tr><td align="center"><code>{m}</code></td><td align="center">扩展前一个字符m次</td><td align="center">ab{2}c表示abbc</td></tr><tr><td align="center"><code>{m,n}</code></td><td align="center">扩展前一个字符m至n次(含n)</td><td align="center">ab{1,2}c表示abc、abbc</td></tr><tr><td align="center">^</td><td align="center">匹配字符串开头</td><td align="center">^abc表示abc且在一个字符串的开头</td></tr><tr><td align="center">$</td><td align="center">匹配字符串结尾</td><td align="center">abc$表示abc且在一个字符串的结尾</td></tr><tr><td align="center">()</td><td align="center">分组标记，内部只能使用`</td><td align="center">`操作符</td></tr><tr><td align="center">\d</td><td align="center">数字，等价于[0-9]</td><td align="center"></td></tr><tr><td align="center">\w</td><td align="center">单词字符，等价于[A-Za-z0-9_]</td><td align="center"></td></tr></tbody></table><p><strong>正则表达式语法实例</strong></p><table><thead><tr><th align="center">正则表达式</th><th align="center">对应字符串</th></tr></thead><tbody><tr><td align="center">`P(Y</td><td align="center">YT</td></tr><tr><td align="center">PYTHON+</td><td align="center">‘PYTHON’ ‘PYTHONN’ ‘PYTHONNN’…</td></tr><tr><td align="center">PY[TH]ON</td><td align="center">‘PYTON’ ‘PYHON’</td></tr><tr><td align="center">PY[^TH]?ON</td><td align="center">‘PYON’ ‘PTaon’ ‘PYbON’ ‘PYcON’…</td></tr><tr><td align="center">PY{:3}N</td><td align="center">‘PN’ ‘PYN’ ‘PYYN’ ‘PYYYN’</td></tr></tbody></table><p><strong>经典正则表达式实例</strong><br>^[A-Za-z]+$&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;由26个字母组成的字符串<br>^[A-Za-z0-9]+$&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;由26个字母和数字组成的字符串<br>^-?\d+$&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&emsp;&ensp;整数形式的字符串<br><code>^[0-9]*[1-9][0-9]*$</code>&ensp;&ensp;&ensp;&ensp;&ensp;正整数形式的字符串<br>[1-9]\d{5}&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;中国境内邮政编码，6位<br>[\u4e00-\u9fa5]&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;匹配中文字符<br>\d{3}-\d{8}|\d{4}-\d{7}&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;国内电话号码，010-68913536</p><h1 id="Re库的基本使用"><a href="#Re库的基本使用" class="headerlink" title="Re库的基本使用"></a>Re库的基本使用</h1><p>正则表达式的表达类型<br><strong>·raw string类型(原生字符串)<br>·sting类型，较繁琐</strong>      </p><h2 id="Re库主要功能函数"><a href="#Re库主要功能函数" class="headerlink" title="Re库主要功能函数"></a>Re库主要功能函数</h2><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">re.search()</td><td align="center">在一个字符串中搜索匹配正则表达式的第一个位置，返回match对象</td></tr><tr><td align="center">re.match()</td><td align="center">从一个字符串的开始位置起匹配正则表达式，返回match对象</td></tr><tr><td align="center">re.findall()</td><td align="center">搜索字符串，以列表类型返回全部能匹配的子串</td></tr><tr><td align="center">re.split()</td><td align="center">将一个字符串按照正则表达式匹配结果进行分割，返回列表类型</td></tr><tr><td align="center">re.finditer()</td><td align="center">搜索字符串，返回一个匹配结果的迭代类型，每个迭代元素是match对象</td></tr><tr><td align="center">re.sub()</td><td align="center">在一个字符串中替换所有匹配正则表达式的子串，返回替换后的字符串</td></tr></tbody></table><p><strong>re.search(parttern,string,flags=0)</strong><br>※在一个字符串中搜索匹配正则表达式的第一个位置，返回match对象。<br>pattern:正则表达式的字符串或原生字符串表示<br>strings:待匹配字符串<br>flags:正则表达式使用时的控制标记<br>flags常用控制标记：    </p><table><thead><tr><th align="center">常用标记</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">re.I(re.IGNORECASE)</td><td align="center">忽略正则表达式的大小写，[A-Z]能够匹配小写字符</td></tr><tr><td align="center">re.M(re.MULTLINE)</td><td align="center">正则表达式中的^操作符能够将给定字符串的每行当作匹配开始</td></tr><tr><td align="center">re.S(re.DOTALL)</td><td align="center">正则表达式中的.操作符能够匹配所有字符，默认匹配除换行外的所有字符</td></tr></tbody></table><p><strong>re.match(pattern,string,flags=0)</strong><br>※从一个字符串的开始位置起匹配正则表达式，返回match对象。<br>pattern:正则表达式的字符串或原生字符串表示<br>string:待匹配字符串<br>flags:正则表达式使用时的控制标记     </p><p><strong>re.findall(pattern,string,flags=0)</strong><br>※搜索字符串，以列表类型返回全部能匹配的子串。<br>pattern:正则表达式的字符串或原生字符串表示<br>string;待匹配字符串<br>flags:正则表达式使用时的控制标记     </p><p><strong>re.split(pattern, string, maxsplit=0, flags=0)</strong><br>※将一个字符串按照正则表达式匹配结果进行分割，返回列表类型。<br>pattern:正则表达式的字符串或原生字符串表示<br>string;待匹配字符串<br>maxsplit:最大分割数，剩余部分作为最后一个元素输出<br>flags:正则表达式使用时的控制标记     </p><p><strong>re.finditer(pattern,string,flags=0)</strong><br>※搜索字符串，返回一个匹配结果的迭代类型，每个迭代元素是match对象。<br>pattern:正则表达式的字符串或原生字符串表示<br>string:待匹配字符串<br>flags:正则表达式使用时的控制标记     </p><p><strong>re.sub(pattern, repl, string, count=0, flags=0)</strong><br>※在一个字符串中替换所有匹配正则表达式的子串，返回替换后的字符串。<br>pattern:正则表达式的字符串或原生字符串表示<br>repl:替换匹配字符串的字符串<br>string:待匹配字符串<br>count:匹配的最大替换次数<br>flags:正则表达式使用时的控制标记     </p><p><strong>regex = re.compile(pattern, flags=0)</strong><br>※将正则表达式的字符串形式编译成正则表达式对象<br>pattern:正则表达式的字符串或原生字符串表示<br>flags:正则表达式使用时的控制标记     </p><h2 id="Re库的Match对象"><a href="#Re库的Match对象" class="headerlink" title="Re库的Match对象"></a>Re库的Match对象</h2><p><strong>Match对象的属性</strong>  </p><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">.string</td><td align="center">待匹配的文本</td></tr><tr><td align="center">.re</td><td align="center">匹配时使用的pattern对象(正则表达式)</td></tr><tr><td align="center">.pos</td><td align="center">正则表达式搜索文本的开始位置</td></tr><tr><td align="center">.endpos</td><td align="center">正则表达式搜索文本的结束位置</td></tr></tbody></table><p><strong>Match对象的方法</strong></p><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">.group(0)</td><td align="center">获得匹配后的字符串</td></tr><tr><td align="center">.start()</td><td align="center">匹配字符串在原始字符串的开始位置</td></tr><tr><td align="center">.end()</td><td align="center">匹配字符串在原始字符串的结束位置</td></tr><tr><td align="center">.span()</td><td align="center">返回(.start(),.end())</td></tr></tbody></table><h2 id="Re库的贪婪匹配和最小匹配"><a href="#Re库的贪婪匹配和最小匹配" class="headerlink" title="Re库的贪婪匹配和最小匹配"></a>Re库的贪婪匹配和最小匹配</h2><p><strong>Re库默认采用贪婪匹配，即输出匹配最长的字符串</strong>     </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">match = re.search(<span class="string">r'PY.*N'</span>, <span class="string">'PYANBNCNDN'</span>)</span><br><span class="line">print(match.group(<span class="number">0</span>))</span><br></pre></td></tr></table></figure><p>输出：<code>PYANBNCNDN</code></p><p><strong>若要输出最小匹配字符串：</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">match = re.search(<span class="string">r'PY.*?N'</span>, <span class="string">'PYANBNCNDN'</span>)</span><br><span class="line">print(match.group(<span class="number">0</span>))</span><br></pre></td></tr></table></figure><p>输出：<code>PYAN</code></p><p><strong>最小匹配操作符</strong></p><table><thead><tr><th align="center">操作符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">*?</td><td align="center">前一个字符0次或无限次扩展，最小匹配</td></tr><tr><td align="center">+?</td><td align="center">前一个字符1次或无限次扩展，最小匹配</td></tr><tr><td align="center">??</td><td align="center">前一个字符0次或1次扩展，最小匹配</td></tr><tr><td align="center"><code>{m,n}?</code></td><td align="center">扩展前一个字符m至n次(含n)，最小匹配</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;正则表达式的概念&quot;&gt;&lt;a href=&quot;#正则表达式的概念&quot; class=&quot;headerlink&quot; title=&quot;正则表达式的概念&quot;&gt;&lt;/a&gt;正则表达式的概念&lt;/h1&gt;&lt;p&gt;Regular expression–Re&lt;br&gt;&lt;strong&gt;·通用的字符串表达框架&lt;b
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python网络爬虫与信息提取（第2周 网络爬虫提取 单元六 中国大学排名爬虫）</title>
    <link href="https://jluliyuxi.github.io/2020/06/16/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E4%B8%8E%E4%BF%A1%E6%81%AF%E6%8F%90%E5%8F%96%EF%BC%88%E7%AC%AC2%E5%91%A8%20%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E6%8F%90%E5%8F%96%20%E5%8D%95%E5%85%83%E5%85%AD%20%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E6%8E%92%E5%90%8D%E7%88%AC%E8%99%AB%EF%BC%89/"/>
    <id>https://jluliyuxi.github.io/2020/06/16/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E4%B8%8E%E4%BF%A1%E6%81%AF%E6%8F%90%E5%8F%96%EF%BC%88%E7%AC%AC2%E5%91%A8%20%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E6%8F%90%E5%8F%96%20%E5%8D%95%E5%85%83%E5%85%AD%20%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E6%8E%92%E5%90%8D%E7%88%AC%E8%99%AB%EF%BC%89/</id>
    <published>2020-06-16T11:07:04.745Z</published>
    <updated>2020-07-25T00:25:32.911Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/06/22/ZTaXs6i9SwBAzQt.png" alt="程序流程图"></p><h1 id="定向爬虫实例"><a href="#定向爬虫实例" class="headerlink" title="定向爬虫实例"></a>定向爬虫实例</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> bs4</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url, timeout = <span class="number">30</span>)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span>  r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fillUnivList</span><span class="params">(ulist, html)</span>:</span></span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">"html.parser"</span>)</span><br><span class="line">    <span class="keyword">for</span> tr <span class="keyword">in</span> soup.find(<span class="string">'tbody'</span>).children:</span><br><span class="line">        <span class="keyword">if</span> isinstance(tr, bs4.element.Tag):</span><br><span class="line">            tds = tr(<span class="string">'td'</span>)</span><br><span class="line">            ulist.append([tds[<span class="number">0</span>].string, tds[<span class="number">1</span>].string, tds[<span class="number">4</span>].string])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printUnivList</span><span class="params">(ulist, num)</span>:</span></span><br><span class="line">    print(<span class="string">"&#123;:^10&#125;\t&#123;:^6&#125;\t&#123;:^10&#125;"</span>.format(<span class="string">"排名"</span>, <span class="string">"学校名称"</span>, <span class="string">"总分"</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        u = ulist[i]</span><br><span class="line">        print(<span class="string">"&#123;:^10&#125;\t&#123;:^6&#125;\t&#123;:^10&#125;"</span>.format(u[<span class="number">0</span>], u[<span class="number">1</span>], u[<span class="number">2</span>]))</span><br><span class="line">    print(<span class="string">"Suc"</span> + str(num))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    unifo = []</span><br><span class="line">    url = <span class="string">"http://www.zuihaodaxue.com/zuihaodaxuepaiming2020.html"</span></span><br><span class="line">    html = getHTMLText(url)</span><br><span class="line">    fillUnivList(unifo, html)</span><br><span class="line">    printUnivList(unifo, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><p><img src="https://i.loli.net/2020/06/16/bB91nZezTtF7Usd.png" alt="输出结果"></p><h1 id="定向爬虫实例优化"><a href="#定向爬虫实例优化" class="headerlink" title="定向爬虫实例优化"></a>定向爬虫实例优化</h1><p><strong>中文对齐问题的解决</strong>：采用中文字符的空格填充<code>chr(12288)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#旨在优化中文字符空格的问题</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> bs4</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url, timeout = <span class="number">30</span>)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span>  r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fillUnivList</span><span class="params">(ulist, html)</span>:</span></span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">"html.parser"</span>)</span><br><span class="line">    <span class="keyword">for</span> tr <span class="keyword">in</span> soup.find(<span class="string">'tbody'</span>).children:</span><br><span class="line">        <span class="keyword">if</span> isinstance(tr, bs4.element.Tag):</span><br><span class="line">            tds = tr(<span class="string">'td'</span>)</span><br><span class="line">            ulist.append([tds[<span class="number">0</span>].string, tds[<span class="number">1</span>].string, tds[<span class="number">4</span>].string])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printUnivList</span><span class="params">(ulist, num)</span>:</span></span><br><span class="line">    tplt = <span class="string">"&#123;0:^10&#125;\t&#123;1:&#123;3&#125;^10&#125;\t&#123;2:^10&#125;"</span></span><br><span class="line">    print(tplt.format(<span class="string">"排名"</span>, <span class="string">"学校名称"</span>, <span class="string">"总分"</span>, chr(<span class="number">12288</span>)))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        u = ulist[i]</span><br><span class="line">        print(tplt.format(u[<span class="number">0</span>], u[<span class="number">1</span>], u[<span class="number">2</span>], chr(<span class="number">12288</span>)))</span><br><span class="line">    print(<span class="string">"Suc"</span> + str(num))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    unifo = []</span><br><span class="line">    url = <span class="string">"http://www.zuihaodaxue.com/zuihaodaxuepaiming2020.html"</span></span><br><span class="line">    html = getHTMLText(url)</span><br><span class="line">    fillUnivList(unifo, html)</span><br><span class="line">    printUnivList(unifo, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><p><img src="https://i.loli.net/2020/06/16/l6EbVGoksfxhXza.png" alt="输出结果"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/06/22/ZTaXs6i9SwBAzQt.png&quot; alt=&quot;程序流程图&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;定向爬虫实例&quot;&gt;&lt;a href=&quot;#定向爬虫实例&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python网络爬虫与信息提取（第2周 网络爬虫提取 单元五 信息组织与提取方法）</title>
    <link href="https://jluliyuxi.github.io/2020/06/16/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E4%B8%8E%E4%BF%A1%E6%81%AF%E6%8F%90%E5%8F%96%EF%BC%88%E7%AC%AC2%E5%91%A8%20%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E6%8F%90%E5%8F%96%20%E5%8D%95%E5%85%83%E4%BA%94%20%E4%BF%A1%E6%81%AF%E7%BB%84%E7%BB%87%E4%B8%8E%E6%8F%90%E5%8F%96%E6%96%B9%E6%B3%95%EF%BC%89/"/>
    <id>https://jluliyuxi.github.io/2020/06/16/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E4%B8%8E%E4%BF%A1%E6%81%AF%E6%8F%90%E5%8F%96%EF%BC%88%E7%AC%AC2%E5%91%A8%20%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E6%8F%90%E5%8F%96%20%E5%8D%95%E5%85%83%E4%BA%94%20%E4%BF%A1%E6%81%AF%E7%BB%84%E7%BB%87%E4%B8%8E%E6%8F%90%E5%8F%96%E6%96%B9%E6%B3%95%EF%BC%89/</id>
    <published>2020-06-16T07:26:01.902Z</published>
    <updated>2020-06-22T09:06:14.551Z</updated>
    
    <content type="html"><![CDATA[<h1 id="信息标记的三种形式"><a href="#信息标记的三种形式" class="headerlink" title="信息标记的三种形式"></a>信息标记的三种形式</h1><h2 id="XML（eXtensible-Markup-Language）"><a href="#XML（eXtensible-Markup-Language）" class="headerlink" title="XML（eXtensible Markup Language）"></a>XML（eXtensible Markup Language）</h2><p>标签中含有内容时：<code>&lt;name&gt; ... &lt;/name&gt;</code>  </p><p>标签中不含内容时：<code>&lt;name/&gt;</code>     </p><p>注释：<code>&lt;!-- --&gt;</code></p><h2 id="JSON-JavaScript-Object-Notation"><a href="#JSON-JavaScript-Object-Notation" class="headerlink" title="JSON(JavaScript Object Notation)"></a>JSON(JavaScript Object Notation)</h2><p>“key” : “value”<br>“key” : [“value1”,”value2”]<br>“key” : {“subkey”:”subvalue”}<br>“key” : {<br>&ensp;&ensp;”name1” : “value1”<br>&ensp;&ensp;”name2” : “value2”<br>}   </p><h2 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a>YAML</h2><p><strong>无类型键值对</strong> key:name     </p><p><strong>通过缩进表达所属关系</strong>：<br>name :<br>&ensp;&ensp;newname :<br>&ensp;&ensp;oldname :     </p><p><strong>用-号表达并列关系</strong>：<br>name :<br>-name1<br>-name2      </p><p><strong>用|表示整块数据 #表示注释</strong>      </p><h1 id="三种信息标记形式的比较"><a href="#三种信息标记形式的比较" class="headerlink" title="三种信息标记形式的比较"></a>三种信息标记形式的比较</h1><p>XML Internet.上的信息交互与传递。<br>JSON 移动应用云端和节点的信息通信，无注释。<br>YAML 各类系统的配置文件，有注释易读。       </p><h1 id="信息提取的一般方法"><a href="#信息提取的一般方法" class="headerlink" title="信息提取的一般方法"></a>信息提取的一般方法</h1><h2 id="方法一-完整解析信息的标记形式，再提取关键信息。"><a href="#方法一-完整解析信息的标记形式，再提取关键信息。" class="headerlink" title="方法一:完整解析信息的标记形式，再提取关键信息。"></a>方法一:完整解析信息的标记形式，再提取关键信息。</h2><p>XML JSON YAML<br><strong>需要标记解析器</strong><br>例如: bs4库的标签树遍历<br>优点:信息解析准确<br>缺点:提取过程繁琐，速度慢。      </p><h2 id="方法二-无视标记形式，直接搜索关键信息。"><a href="#方法二-无视标记形式，直接搜索关键信息。" class="headerlink" title="方法二:无视标记形式，直接搜索关键信息。"></a>方法二:无视标记形式，直接搜索关键信息。</h2><p><strong>搜索</strong><br>对信息的文本查找函数即可。<br>优点:提取过程简洁，速度较快。<br>缺点:提取结果准确性与信息内容相关。      </p><h1 id="基于bs4库的HTML内容查找方法"><a href="#基于bs4库的HTML内容查找方法" class="headerlink" title="基于bs4库的HTML内容查找方法"></a>基于bs4库的HTML内容查找方法</h1><p><strong>&lt; &gt;.find_ all(name, attrs, recursive, string, **kwargs)</strong><br>返回一个列表类型，存储查找的结果。<br><strong>name</strong>:对标签名称的检索字符串。<br><strong>attrs</strong>:对标签属性值的检索字符串，可标注属性检索。<br><strong>recursive</strong>:是否对子孙全部检索，默认True。<br><strong>string: &lt; &gt;… &lt; / &gt;</strong>:中字符串区域的检索字符串。      </p><p><strong>扩展方法</strong></p><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">&lt;&gt;.find()</td><td align="center">搜索且只返回一个结果，字符串类型，同.find_all()参数</td></tr><tr><td align="center">&lt;&gt;.find_parents()</td><td align="center">在先辈节点中搜索，返回列表类型，同.find_all()参数</td></tr><tr><td align="center">&lt;&gt;.find_parent()</td><td align="center">在先辈节点中返回一个结果，字符串类型，同.find()参数</td></tr><tr><td align="center">&lt;&gt;.find_next_siblings()</td><td align="center">在后续平行节点中搜索，返回列表类型，同.find_all()参数</td></tr><tr><td align="center">&lt;&gt;.find_ next sibling()</td><td align="center">在后续平行节点中返回一个结果，字符串类型,同.find()参数</td></tr><tr><td align="center">&lt;&gt;.find_previous_siblings()</td><td align="center">在前序平行节点中搜索，返回列表类型，同.find_all()参数</td></tr><tr><td align="center">&lt;&gt;.find_previous_sibling()</td><td align="center">在前序平行节点中返回一个结果，字符串类型，同.find()参数</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;信息标记的三种形式&quot;&gt;&lt;a href=&quot;#信息标记的三种形式&quot; class=&quot;headerlink&quot; title=&quot;信息标记的三种形式&quot;&gt;&lt;/a&gt;信息标记的三种形式&lt;/h1&gt;&lt;h2 id=&quot;XML（eXtensible-Markup-Language）&quot;&gt;&lt;a h
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python网络爬虫与信息提取（第2周 网络爬虫提取 单元四 BeautifulSoup库入门）</title>
    <link href="https://jluliyuxi.github.io/2020/06/11/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E4%B8%8E%E4%BF%A1%E6%81%AF%E6%8F%90%E5%8F%96%EF%BC%88%E7%AC%AC2%E5%91%A8%20%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E6%8F%90%E5%8F%96%20%E5%8D%95%E5%85%83%E5%9B%9B%20BeautifulSoup%E5%BA%93%E5%85%A5%E9%97%A8%EF%BC%89/"/>
    <id>https://jluliyuxi.github.io/2020/06/11/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E4%B8%8E%E4%BF%A1%E6%81%AF%E6%8F%90%E5%8F%96%EF%BC%88%E7%AC%AC2%E5%91%A8%20%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E6%8F%90%E5%8F%96%20%E5%8D%95%E5%85%83%E5%9B%9B%20BeautifulSoup%E5%BA%93%E5%85%A5%E9%97%A8%EF%BC%89/</id>
    <published>2020-06-11T07:48:30.595Z</published>
    <updated>2020-07-25T00:25:30.242Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BeautifulSoup库的安装"><a href="#BeautifulSoup库的安装" class="headerlink" title="BeautifulSoup库的安装"></a>BeautifulSoup库的安装</h1><p>命令行内输入<code>pip install beautifulsoup4</code>      </p><h1 id="BeautifulSoup库的测试"><a href="#BeautifulSoup库的测试" class="headerlink" title="BeautifulSoup库的测试"></a>BeautifulSoup库的测试</h1><p>在任一浏览器中输入<code>http://python123.io/ws/demo.html</code><br>查看网站的源代码    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">r = requests.get(<span class="string">'http://python123.io/ws/demo.html'</span>)</span><br><span class="line">demo = r.text <span class="comment">#获取网站的源代码</span></span><br><span class="line">soup = BeautifulSoup(demo, <span class="string">'html.parser'</span>) <span class="comment">#对demo进行html的解析</span></span><br><span class="line">print(soup.prettify())</span><br></pre></td></tr></table></figure><p><strong>主要用法</strong>    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(<span class="string">'&lt;p&gt;data&lt;/p&gt;'</span>,<span class="string">'html.parser'</span>)</span><br></pre></td></tr></table></figure><h1 id="BeautifulSoup库的基本元素"><a href="#BeautifulSoup库的基本元素" class="headerlink" title="BeautifulSoup库的基本元素"></a>BeautifulSoup库的基本元素</h1><p><img src="https://i.loli.net/2020/06/11/cuA1DqJTfeilpkj.png" alt=""></p><p>属性是由键值对构成的<br><strong>BeautifulSoup库解析器</strong></p><table><thead><tr><th align="center">解析器</th><th align="center">使用方法</th><th align="center">条件</th></tr></thead><tbody><tr><td align="center">bs4的HTML解析器</td><td align="center">BeautifulSoup(mk,’html.parser)</td><td align="center">安装bs4库</td></tr><tr><td align="center">lxml的HTML解析器</td><td align="center">BeautifulSoup(mk,’lxml’)</td><td align="center">pip install lxml</td></tr><tr><td align="center">lxml的XML解析器</td><td align="center">BeautifulSoup(mk,’ xml’)</td><td align="center">pip install lxml</td></tr><tr><td align="center">html5lib的解析器</td><td align="center">BeautifulSoup( mk,’ html5lib’)</td><td align="center">pip install html5lib</td></tr></tbody></table><p><strong>BeautifulSoup类的基本元素</strong></p><table><thead><tr><th align="center">基本元素</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Tag</td><td align="center">标签，最基本的信息组织单元，分别用&lt;&gt;和&lt;/&gt;标明开头和结尾</td></tr><tr><td align="center">Name</td><td align="center">标签的名字，&lt; p &gt;…&lt; /p &gt;的名字是’p’， 格式: &lt; tag &gt;.name</td></tr><tr><td align="center">Attributes</td><td align="center">标签的属性，字典形式组织，格式: &lt; tag &gt; .attrs</td></tr><tr><td align="center">NavigableString</td><td align="center">标签内非属性字符串，&lt;&gt;…&lt;/&gt;中字符串， 格式: &lt; tag     &gt;.string</td></tr><tr><td align="center">Comment</td><td align="center">标签内字符串的注释部分，一种特殊的Comment类型</td></tr></tbody></table><p><strong>获取Tag的方法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">r = requests.get(<span class="string">'http://python123.io/ws/demo.html'</span>)</span><br><span class="line">demo = r.text <span class="comment">#获取网站的源代码</span></span><br><span class="line">soup = BeautifulSoup(demo, <span class="string">'html.parser'</span>)</span><br><span class="line">print(soup.title)</span><br><span class="line">tag = soup.a</span><br><span class="line">print(tag)</span><br></pre></td></tr></table></figure><p><strong>获取Name的方法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">r = requests.get(<span class="string">'http://python123.io/ws/demo.html'</span>)</span><br><span class="line">demo = r.text <span class="comment">#获取网站的源代码</span></span><br><span class="line">soup = BeautifulSoup(demo, <span class="string">'html.parser'</span>)</span><br><span class="line">tag = soup.a</span><br><span class="line">print(soup.a.name)</span><br><span class="line">print(soup.a.parent.name)</span><br><span class="line">print(soup.a.parent.parent.name)</span><br></pre></td></tr></table></figure><p><strong>获取Attributes的方法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">r = requests.get(<span class="string">'http://python123.io/ws/demo.html'</span>)</span><br><span class="line">demo = r.text <span class="comment">#获取网站的源代码</span></span><br><span class="line">soup = BeautifulSoup(demo, <span class="string">'html.parser'</span>)</span><br><span class="line">tag = soup.a</span><br><span class="line">print(tag.attrs)</span><br><span class="line">print(tag.attrs[<span class="string">'class'</span>]) <span class="comment">#获取class对应的值</span></span><br><span class="line">print(tag.attrs[<span class="string">'href'</span>]) <span class="comment">#获取标签链接</span></span><br><span class="line">print(type(tag.attrs)) <span class="comment">#获取标签属性的类型</span></span><br></pre></td></tr></table></figure><p><strong>获取NavigableString的方法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">r = requests.get(<span class="string">'http://python123.io/ws/demo.html'</span>)</span><br><span class="line">demo = r.text <span class="comment">#获取网站的源代码</span></span><br><span class="line">soup = BeautifulSoup(demo, <span class="string">'html.parser'</span>)</span><br><span class="line">print(soup.a.string)</span><br><span class="line">print((soup.p.string))</span><br><span class="line">print(type(soup.p.string))</span><br></pre></td></tr></table></figure><p><strong>获取Comment的方法</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">r = requests.get(<span class="string">'http://python123.io/ws/demo.html'</span>)</span><br><span class="line">demo = r.text <span class="comment">#获取网站的源代码</span></span><br><span class="line">soup = BeautifulSoup(demo, <span class="string">'html.parser'</span>)</span><br><span class="line">print(soup.p)</span><br><span class="line">newsoup = BeautifulSoup(<span class="string">'&lt;p class="title"&gt;&lt;b&gt;The demo python introduces several python courses.&lt;/b&gt;&lt;/p&gt;'</span>, <span class="string">'html.parser'</span>)</span><br><span class="line">print(newsoup.b.string)</span><br><span class="line">print(type(newsoup.b.string))</span><br></pre></td></tr></table></figure><h1 id="基于bs4库的HTML内容遍历方法"><a href="#基于bs4库的HTML内容遍历方法" class="headerlink" title="基于bs4库的HTML内容遍历方法"></a>基于bs4库的HTML内容遍历方法</h1><p><img src="https://i.loli.net/2020/06/11/VOEiaJBo3fGAF1t.png" alt="HTML基本格式及三种遍历方法"></p><p><strong>标签树的下行遍历</strong></p><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">.contents</td><td align="center">子节点的列表，将&lt; tag &gt;所有儿子节点存入列表</td></tr><tr><td align="center">.children</td><td align="center">子节点的迭代类型，与.contents类似，用于循环遍历儿子节点</td></tr><tr><td align="center">.descendants</td><td align="center">子孙节点的迭代类型，包含所有子孙节点，用于循环遍历</td></tr></tbody></table><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">r = requests.get(<span class="string">'http://python123.io/ws/demo.html'</span>)</span><br><span class="line">demo = r.text <span class="comment">#获取网站的源代码</span></span><br><span class="line">soup = BeautifulSoup(demo, <span class="string">'html.parser'</span>)</span><br><span class="line">print(soup.head)</span><br><span class="line">print(soup.head.contents)</span><br><span class="line">print(soup.body.contents)</span><br><span class="line">print(soup.body.contents[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>遍历儿子节点：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> soup.body.children:</span><br><span class="line">    pirnt(child)</span><br></pre></td></tr></table></figure><p><strong>标签树的上行遍历</strong></p><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">.parent</td><td align="center">节点的父亲标签</td></tr><tr><td align="center">.parents</td><td align="center">节点先辈标签的迭代类型，用于循环遍历先辈节点</td></tr></tbody></table><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">soup = BeautifulSoup(demo, <span class="string">'html.parser'</span>)</span><br><span class="line"><span class="keyword">for</span> parent <span class="keyword">in</span> soup.a.parents:</span><br><span class="line">    <span class="keyword">if</span> parent <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        print(parent)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(parent.name) <span class="comment">#打印soup.a标签所有的先辈</span></span><br></pre></td></tr></table></figure><p><strong>标签树的平行遍历</strong></p><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">.next_sibling</td><td align="center">返回按照HTML文本顺序的下一个平行节点标签</td></tr><tr><td align="center">.previous_sibling</td><td align="center">返回按照HTML文本顺序的上一 个平行节点标签</td></tr><tr><td align="center">.next_siblings</td><td align="center">迭代类型，返回按照HTML文本顺序的后续所有平行节点标签</td></tr><tr><td align="center">.previous_siblings</td><td align="center">迭代类型，返回按照HTML文本顺序的前续所有平行节点标签</td></tr></tbody></table><p><img src="https://i.loli.net/2020/06/11/PKTVZSgwBEQtL6a.png" alt="平行遍历发生在同一个父节点下的各节点间"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">soup = BeautifulSoup(demo, <span class="string">'html.parser'</span>)</span><br><span class="line">print(soup.a.next_sibling) <span class="comment">#NavigableString也构成了节点</span></span><br><span class="line">print(soup.a.next_sibling.next_sibling)</span><br><span class="line">print(soup.a.previous_sibling)</span><br><span class="line">print(soup.a.parent)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#对标签树进行循环遍历</span></span><br><span class="line"><span class="keyword">for</span> sibling <span class="keyword">in</span> soup.a.next_siblings:</span><br><span class="line">    print(sibling)  <span class="comment">#遍历后续节点</span></span><br><span class="line"><span class="keyword">for</span> sibling <span class="keyword">in</span> soup.a.previous_siblings:</span><br><span class="line">    print(sibling)  <span class="comment">#遍历前续节点</span></span><br></pre></td></tr></table></figure><p><strong>遍历类型总结</strong></p><p><img src="https://i.loli.net/2020/06/11/Jh4sljIbeLHQoMy.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;BeautifulSoup库的安装&quot;&gt;&lt;a href=&quot;#BeautifulSoup库的安装&quot; class=&quot;headerlink&quot; title=&quot;BeautifulSoup库的安装&quot;&gt;&lt;/a&gt;BeautifulSoup库的安装&lt;/h1&gt;&lt;p&gt;命令行内输入&lt;cod
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
